/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {Job} from '../model/job';
import {JobNew} from '../model/jobNew';
import {Schedule} from '../model/schedule';
import {ScheduleNew} from '../model/scheduleNew';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class JobService {

  protected basePath = 'http://localhost:9000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   *
   * Creates a new job
   * @param job  Job to be created.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addJob(job: JobNew, observe?: 'body', reportProgress?: boolean): Observable<Job>;
  public addJob(job: JobNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Job>>;
  public addJob(job: JobNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Job>>;
  public addJob(job: JobNew, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (job === null || job === undefined) {
      throw new Error('Required parameter job was null or undefined when calling addJob.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Job>(`${this.basePath}/jobs`,
      job,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Creates a new schedule
   * @param schedule  Schedule to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addSchedule(schedule: ScheduleNew, observe?: 'body', reportProgress?: boolean): Observable<Schedule>;
  public addSchedule(schedule: ScheduleNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Schedule>>;
  public addSchedule(schedule: ScheduleNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Schedule>>;
  public addSchedule(schedule: ScheduleNew, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (schedule === null || schedule === undefined) {
      throw new Error('Required parameter schedule was null or undefined when calling addSchedule.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Schedule>(`${this.basePath}/schedule`,
      schedule,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns the job with the given id.
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findJob(id: string, observe?: 'body', reportProgress?: boolean): Observable<Job>;
  public findJob(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Job>>;
  public findJob(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Job>>;
  public findJob(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findJob.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Job>(`${this.basePath}/jobs/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns all jobs visible to the user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findJobs(observe?: 'body', reportProgress?: boolean): Observable<Array<Job>>;
  public findJobs(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Job>>>;
  public findJobs(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Job>>>;
  public findJobs(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Job>>(`${this.basePath}/jobs`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Retrieves all schedules by the current user.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSchedules(observe?: 'body', reportProgress?: boolean): Observable<Array<Schedule>>;
  public getSchedules(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Schedule>>>;
  public getSchedules(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Schedule>>>;
  public getSchedules(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Schedule>>(`${this.basePath}/schedule`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}

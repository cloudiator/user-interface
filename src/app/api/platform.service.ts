/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {NewPlatform} from '../model/newPlatform';
import {NewPlatformEnvironment} from '../model/newPlatformEnvironment';
import {NewPlatformHardware} from '../model/newPlatformHardware';
import {NewPlatformRuntime} from '../model/newPlatformRuntime';
import {Platform} from '../model/platform';
import {PlatformEnvironment} from '../model/platformEnvironment';
import {PlatformHardware} from '../model/platformHardware';
import {PlatformRuntime} from '../model/platformRuntime';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class PlatformService {

  protected basePath = 'http://localhost:9000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   *
   * Creates a new platform.
   * @param platform Platform to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addPlatform(platform: NewPlatform, observe?: 'body', reportProgress?: boolean): Observable<Platform>;
  public addPlatform(platform: NewPlatform, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Platform>>;
  public addPlatform(platform: NewPlatform, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Platform>>;
  public addPlatform(platform: NewPlatform, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (platform === null || platform === undefined) {
      throw new Error('Required parameter platform was null or undefined when calling addPlatform.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Platform>(`${this.basePath}/platform`,
      platform,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Creates a new PlatformEnvironment
   * @param platformEnvironment  PlatformEnvironment to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'body', reportProgress?: boolean): Observable<PlatformEnvironment>;
  public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformEnvironment>>;
  public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformEnvironment>>;
  public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (platformEnvironment === null || platformEnvironment === undefined) {
      throw new Error('Required parameter platformEnvironment was null or undefined when calling addPlatformEnvironment.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PlatformEnvironment>(`${this.basePath}/platformEnvironment`,
      platformEnvironment,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Creates a new PlatformHardware
   * @param platformHardware  PlatformHardware to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'body', reportProgress?: boolean): Observable<PlatformHardware>;
  public addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformHardware>>;
  public addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformHardware>>;
  public addPlatformHardware(platformHardware: NewPlatformHardware, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (platformHardware === null || platformHardware === undefined) {
      throw new Error('Required parameter platformHardware was null or undefined when calling addPlatformHardware.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PlatformHardware>(`${this.basePath}/platformHardware`,
      platformHardware,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Creates a new PlatformRuntime
   * @param platformRuntime  PlatformRuntime to be created
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'body', reportProgress?: boolean): Observable<PlatformRuntime>;
  public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformRuntime>>;
  public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformRuntime>>;
  public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (platformRuntime === null || platformRuntime === undefined) {
      throw new Error('Required parameter platformRuntime was null or undefined when calling addPlatformRuntime.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<PlatformRuntime>(`${this.basePath}/platformRuntime`,
      platformRuntime,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Deletes the platform identified by the given id paramater.
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deletePlatform(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public deletePlatform(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public deletePlatform(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public deletePlatform(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling deletePlatform.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.delete<any>(`${this.basePath}/platform/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns the platform identified by the given id parameter
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatform(id: string, observe?: 'body', reportProgress?: boolean): Observable<Platform>;
  public findPlatform(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Platform>>;
  public findPlatform(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Platform>>;
  public findPlatform(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findPlatform.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Platform>(`${this.basePath}/platform/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns the PlatformEnvironment identified by the id parameter.
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatformEnvironment(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformEnvironment>;
  public findPlatformEnvironment(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformEnvironment>>;
  public findPlatformEnvironment(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformEnvironment>>;
  public findPlatformEnvironment(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findPlatformEnvironment.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PlatformEnvironment>(`${this.basePath}/platformEnvironment/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns all platform environment  visible to the user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatformEnvironments(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformEnvironment>>;
  public findPlatformEnvironments(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformEnvironment>>>;
  public findPlatformEnvironments(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformEnvironment>>>;
  public findPlatformEnvironments(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<PlatformEnvironment>>(`${this.basePath}/platformEnvironment`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns the PlatformHardware identified by the id parameter.
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatformHardware(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformHardware>;
  public findPlatformHardware(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformHardware>>;
  public findPlatformHardware(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformHardware>>;
  public findPlatformHardware(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findPlatformHardware.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PlatformHardware>(`${this.basePath}/platformHardware/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns all platform hardware visible to the user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatformHardwares(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformHardware>>;
  public findPlatformHardwares(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformHardware>>>;
  public findPlatformHardwares(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformHardware>>>;
  public findPlatformHardwares(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<PlatformHardware>>(`${this.basePath}/platformHardware`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns the PlatformRuntime identified by the id parameter.
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatformRuntime(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformRuntime>;
  public findPlatformRuntime(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformRuntime>>;
  public findPlatformRuntime(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformRuntime>>;
  public findPlatformRuntime(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findPlatformRuntime.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PlatformRuntime>(`${this.basePath}/platformRuntime/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns all platform runtime  visible to the user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatformRuntimes(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformRuntime>>;
  public findPlatformRuntimes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformRuntime>>>;
  public findPlatformRuntimes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformRuntime>>>;
  public findPlatformRuntimes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<PlatformRuntime>>(`${this.basePath}/platformRuntime`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   *  Returns all platform from the system that the user has access to
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findPlatforms(observe?: 'body', reportProgress?: boolean): Observable<Array<Platform>>;
  public findPlatforms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Platform>>>;
  public findPlatforms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Platform>>>;
  public findPlatforms(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Platform>>(`${this.basePath}/platform`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}

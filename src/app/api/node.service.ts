/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {Observable} from 'rxjs';

import {Node} from '../model/node';
import {NodeGroup} from '../model/nodeGroup';
import {NodeRequirements} from '../model/nodeRequirements';
import {Queue} from '../model/queue';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class NodeService {

  protected basePath = 'http://localhost:9000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   *
   * Registers an already existing node for usage
   * @param node Node to be registered
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addBYON(node: Node, observe?: 'body', reportProgress?: boolean): Observable<Node>;
  public addBYON(node: Node, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Node>>;
  public addBYON(node: Node, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Node>>;
  public addBYON(node: Node, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (node === null || node === undefined) {
      throw new Error('Required parameter node was null or undefined when calling addBYON.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Node>(`${this.basePath}/byon`,
      node,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Create a new node request
   * @param nodeRequirements Node Request
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addNode(nodeRequirements: NodeRequirements, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
  public addNode(nodeRequirements: NodeRequirements, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
  public addNode(nodeRequirements: NodeRequirements, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
  public addNode(nodeRequirements: NodeRequirements, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (nodeRequirements === null || nodeRequirements === undefined) {
      throw new Error('Required parameter nodeRequirements was null or undefined when calling addNode.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Queue>(`${this.basePath}/node`,
      nodeRequirements,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Returns all node groups for the current user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findNodeGroups(observe?: 'body', reportProgress?: boolean): Observable<Array<NodeGroup>>;
  public findNodeGroups(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NodeGroup>>>;
  public findNodeGroups(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NodeGroup>>>;
  public findNodeGroups(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<NodeGroup>>(`${this.basePath}/nodeGroup`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Retrieve all nodes the current user has access to
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findNodes(observe?: 'body', reportProgress?: boolean): Observable<Array<Node>>;
  public findNodes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Node>>>;
  public findNodes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Node>>>;
  public findNodes(observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Node>>(`${this.basePath}/node`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Retrieves the node with the given id.
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getNode(id: string, observe?: 'body', reportProgress?: boolean): Observable<Node>;
  public getNode(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Node>>;
  public getNode(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Node>>;
  public getNode(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getNode.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Node>(`${this.basePath}/node/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   *
   * Retrieves a node group, which groups multiple nodes that were create during one request
   * @param id Unique identifier of the resource
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getNodeGroup(id: string, observe?: 'body', reportProgress?: boolean): Observable<NodeGroup>;
  public getNodeGroup(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NodeGroup>>;
  public getNodeGroup(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NodeGroup>>;
  public getNodeGroup(id: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getNodeGroup.');
    }

    let headers = this.defaultHeaders;

    // authentication (ApiKeyAuth) required
    if (this.configuration.apiKeys['X-API-Key']) {
      headers = headers.set('X-API-Key', this.configuration.apiKeys['X-API-Key']);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<NodeGroup>(`${this.basePath}/nodeGroup/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}

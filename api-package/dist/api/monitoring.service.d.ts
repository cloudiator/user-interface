/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Monitor } from '../model/monitor';
import { MonitoringTarget } from '../model/monitoringTarget';
import { Configuration } from '../configuration';
export declare class MonitoringService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * Creates a monitor
     * @param monitor Monitor to be created
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addMonitor(monitor: Monitor, observe?: 'body', reportProgress?: boolean): Observable<Monitor>;
    addMonitor(monitor: Monitor, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Monitor>>;
    addMonitor(monitor: Monitor, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Monitor>>;
    /**
     *
     * Deletes the monitor identified by the given metric name.
     * @param metric Unique identifier of a monitor
     * @param target Target of the Monitor
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteMonitor(metric: string, target: MonitoringTarget, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteMonitor(metric: string, target: MonitoringTarget, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteMonitor(metric: string, target: MonitoringTarget, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     *
     * Returns all monitors visible to the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findMonitors(observe?: 'body', reportProgress?: boolean): Observable<Array<Monitor>>;
    findMonitors(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Monitor>>>;
    findMonitors(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Monitor>>>;
    /**
     *
     * Retrieves the monitor with the given metric name
     * @param metric Unique identifier of a monitor
     * @param target Target of the Monitor
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getMonitor(metric: string, target: MonitoringTarget, observe?: 'body', reportProgress?: boolean): Observable<Monitor>;
    getMonitor(metric: string, target: MonitoringTarget, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Monitor>>;
    getMonitor(metric: string, target: MonitoringTarget, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Monitor>>;
    /**
     *
     * Updating a monitor
     * @param metric Unique identifier of a monitor
     * @param monitor Monitor to be updated
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    updateMonitor(metric: string, monitor: Monitor, observe?: 'body', reportProgress?: boolean): Observable<Monitor>;
    updateMonitor(metric: string, monitor: Monitor, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Monitor>>;
    updateMonitor(metric: string, monitor: Monitor, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Monitor>>;
}

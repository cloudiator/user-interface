/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { NodeCandidate } from '../model/nodeCandidate';
import { NodeRequirements } from '../model/nodeRequirements';
import { Queue } from '../model/queue';
import { Requirement } from '../model/requirement';
import { Solution } from '../model/solution';
import { Configuration } from '../configuration';
export declare class MatchmakingService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * Returns possible node candidates.
     * @param nodeRequirements Node Request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findNodeCandidates(nodeRequirements?: Array<Requirement>, observe?: 'body', reportProgress?: boolean): Observable<Array<NodeCandidate>>;
    findNodeCandidates(nodeRequirements?: Array<Requirement>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NodeCandidate>>>;
    findNodeCandidates(nodeRequirements?: Array<Requirement>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NodeCandidate>>>;
    /**
     *
     * Returns the node candidate with the given id if it exists.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNodeCandidate(id: string, observe?: 'body', reportProgress?: boolean): Observable<NodeCandidate>;
    getNodeCandidate(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NodeCandidate>>;
    getNodeCandidate(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NodeCandidate>>;
    /**
     *
     * Returns a solution of the matchmaking process (if it is still available)
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getSolution(id: string, observe?: 'body', reportProgress?: boolean): Observable<Solution>;
    getSolution(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Solution>>;
    getSolution(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Solution>>;
    /**
     *
     * Solves a matchmaking problem
     * @param nodeRequirements The requirements with respect to nodes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    solveMatchmaking(nodeRequirements: NodeRequirements, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    solveMatchmaking(nodeRequirements: NodeRequirements, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    solveMatchmaking(nodeRequirements: NodeRequirements, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
}

/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { NewPlatform } from '../model/newPlatform';
import { NewPlatformEnvironment } from '../model/newPlatformEnvironment';
import { NewPlatformHardware } from '../model/newPlatformHardware';
import { NewPlatformRuntime } from '../model/newPlatformRuntime';
import { Platform } from '../model/platform';
import { PlatformEnvironment } from '../model/platformEnvironment';
import { PlatformHardware } from '../model/platformHardware';
import { PlatformRuntime } from '../model/platformRuntime';
import { Configuration } from '../configuration';
export declare class PlatformService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * Creates a new platform.
     * @param platform Platform to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPlatform(platform: NewPlatform, observe?: 'body', reportProgress?: boolean): Observable<Platform>;
    addPlatform(platform: NewPlatform, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Platform>>;
    addPlatform(platform: NewPlatform, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Platform>>;
    /**
     *
     * Creates a new PlatformEnvironment
     * @param platformEnvironment PlatformEnvironment to be created
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'body', reportProgress?: boolean): Observable<PlatformEnvironment>;
    addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformEnvironment>>;
    addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformEnvironment>>;
    /**
     *
     * Creates a new PlatformHardware
     * @param platformHardware PlatformHardware to be created
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'body', reportProgress?: boolean): Observable<PlatformHardware>;
    addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformHardware>>;
    addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformHardware>>;
    /**
     *
     * Creates a new PlatformRuntime
     * @param platformRuntime PlatformRuntime to be created
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'body', reportProgress?: boolean): Observable<PlatformRuntime>;
    addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformRuntime>>;
    addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformRuntime>>;
    /**
     *
     * Deletes the platform identified by the given id paramater.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deletePlatform(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deletePlatform(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deletePlatform(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     *
     * Returns the platform identified by the given id parameter
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatform(id: string, observe?: 'body', reportProgress?: boolean): Observable<Platform>;
    findPlatform(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Platform>>;
    findPlatform(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Platform>>;
    /**
     *
     * Returns the PlatformEnvironment identified by the id parameter.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatformEnvironment(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformEnvironment>;
    findPlatformEnvironment(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformEnvironment>>;
    findPlatformEnvironment(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformEnvironment>>;
    /**
     *
     * Returns all platform environment  visible to the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatformEnvironments(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformEnvironment>>;
    findPlatformEnvironments(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformEnvironment>>>;
    findPlatformEnvironments(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformEnvironment>>>;
    /**
     *
     * Returns the PlatformHardware identified by the id parameter.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatformHardware(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformHardware>;
    findPlatformHardware(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformHardware>>;
    findPlatformHardware(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformHardware>>;
    /**
     *
     * Returns all platform hardware visible to the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatformHardwares(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformHardware>>;
    findPlatformHardwares(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformHardware>>>;
    findPlatformHardwares(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformHardware>>>;
    /**
     *
     * Returns the PlatformRuntime identified by the id parameter.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatformRuntime(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformRuntime>;
    findPlatformRuntime(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformRuntime>>;
    findPlatformRuntime(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformRuntime>>;
    /**
     *
     * Returns all platform runtime  visible to the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatformRuntimes(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformRuntime>>;
    findPlatformRuntimes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformRuntime>>>;
    findPlatformRuntimes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformRuntime>>>;
    /**
     *
     * Returns all platform from the system that the user has access to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findPlatforms(observe?: 'body', reportProgress?: boolean): Observable<Array<Platform>>;
    findPlatforms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Platform>>>;
    findPlatforms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Platform>>>;
}

/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ByonNode } from '../model/byonNode';
import { NewNode } from '../model/newNode';
import { Node } from '../model/node';
import { NodeRequest } from '../model/nodeRequest';
import { Queue } from '../model/queue';
import { Configuration } from '../configuration';
export declare class NodeService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * Registers an already existing node for usage
     * @param newNode Node to be registered
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addByon(newNode: NewNode, observe?: 'body', reportProgress?: boolean): Observable<ByonNode>;
    addByon(newNode: NewNode, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByonNode>>;
    addByon(newNode: NewNode, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByonNode>>;
    /**
     *
     * Create a new node request
     * @param nodeRequest Node Request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addNode(nodeRequest: NodeRequest, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    addNode(nodeRequest: NodeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    addNode(nodeRequest: NodeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    /**
     *
     * Deletes the already existing node from cloudiator, if not allocated.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteByon(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    deleteByon(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    deleteByon(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    /**
     *
     * Deletes the node with the given id.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteNode(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    deleteNode(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    deleteNode(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    /**
     *
     * Retrieve all BYONs the current user has access to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findByons(observe?: 'body', reportProgress?: boolean): Observable<Array<ByonNode>>;
    findByons(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ByonNode>>>;
    findByons(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ByonNode>>>;
    /**
     *
     * Retrieve all nodes the current user has access to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findNodes(observe?: 'body', reportProgress?: boolean): Observable<Array<Node>>;
    findNodes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Node>>>;
    findNodes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Node>>>;
    /**
     *
     * Retrieves the node with the given id.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getNode(id: string, observe?: 'body', reportProgress?: boolean): Observable<Node>;
    getNode(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Node>>;
    getNode(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Node>>;
}

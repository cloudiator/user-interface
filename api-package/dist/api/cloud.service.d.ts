/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Cloud } from '../model/cloud';
import { Hardware } from '../model/hardware';
import { Image } from '../model/image';
import { Location } from '../model/location';
import { ModelFunction } from '../model/modelFunction';
import { NewCloud } from '../model/newCloud';
import { Queue } from '../model/queue';
import { VirtualMachine } from '../model/virtualMachine';
import { VirtualMachineRequest } from '../model/virtualMachineRequest';
import { Configuration } from '../configuration';
export declare class CloudService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     *
     * Creates a new cloud.
     * @param cloud Cloud to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addCloud(cloud: NewCloud, observe?: 'body', reportProgress?: boolean): Observable<Cloud>;
    addCloud(cloud: NewCloud, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cloud>>;
    addCloud(cloud: NewCloud, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cloud>>;
    /**
     *
     * Creates a new virtual machine request
     * @param virtualMachineRequest VirtualMachine Request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    addVM(virtualMachineRequest: VirtualMachineRequest, observe?: 'body', reportProgress?: boolean): Observable<Queue>;
    addVM(virtualMachineRequest: VirtualMachineRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;
    addVM(virtualMachineRequest: VirtualMachineRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;
    /**
     *
     * Deletes the cloud identified by the given id paramater.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    deleteCloud(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    deleteCloud(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    deleteCloud(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     *
     * Gets the status of the discovery engine
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    discoveryStatus(observe?: 'body', reportProgress?: boolean): Observable<{
        [key: string]: string;
    }>;
    discoveryStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{
        [key: string]: string;
    }>>;
    discoveryStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{
        [key: string]: string;
    }>>;
    /**
     *
     * Updates a specific hardware
     * @param id Unique identifier of the resource
     * @param hardware Hardware to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    editHardware(id: string, hardware: Hardware, observe?: 'body', reportProgress?: boolean): Observable<Hardware>;
    editHardware(id: string, hardware: Hardware, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Hardware>>;
    editHardware(id: string, hardware: Hardware, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Hardware>>;
    /**
     *
     * Updates a specific image
     * @param id Unique identifier of the resource
     * @param image Image to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    editImage(id: string, image: Image, observe?: 'body', reportProgress?: boolean): Observable<Image>;
    editImage(id: string, image: Image, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Image>>;
    editImage(id: string, image: Image, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Image>>;
    /**
     *
     * Updates a specific location
     * @param id Unique identifier of the resource
     * @param location Location to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    editLocation(id: string, location: Location, observe?: 'body', reportProgress?: boolean): Observable<Location>;
    editLocation(id: string, location: Location, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Location>>;
    editLocation(id: string, location: Location, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Location>>;
    /**
     *
     * Returns the cloud identified by the given id parameter
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findCloud(id: string, observe?: 'body', reportProgress?: boolean): Observable<Cloud>;
    findCloud(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cloud>>;
    findCloud(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cloud>>;
    /**
     *
     * Returns all clouds from the system that the user has access to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findClouds(observe?: 'body', reportProgress?: boolean): Observable<Array<Cloud>>;
    findClouds(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cloud>>>;
    findClouds(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cloud>>>;
    /**
     *
     * Finds all functions the user has access to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findFunctions(observe?: 'body', reportProgress?: boolean): Observable<Array<ModelFunction>>;
    findFunctions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModelFunction>>>;
    findFunctions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModelFunction>>>;
    /**
     *
     * Returns all hardware visible to the user
     * @param cloudId (Optional) Unique identifier to filter a specific cloud
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findHardware(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Hardware>>;
    findHardware(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Hardware>>>;
    findHardware(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Hardware>>>;
    /**
     *
     * Returns all images visable to the user
     * @param cloudId (Optional) Unique identifier to filter a specific cloud
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findImages(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Image>>;
    findImages(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Image>>>;
    findImages(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Image>>>;
    /**
     *
     * Returns all locations visible to the user
     * @param cloudId (Optional) Unique identifier to filter a specific cloud
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findLocations(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Location>>;
    findLocations(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Location>>>;
    findLocations(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Location>>>;
    /**
     *
     * Finds all virtual machines the user has access to
     * @param cloudId (Optional) Unique identifier to filter a specific cloud
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    findVMs(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VirtualMachine>>;
    findVMs(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VirtualMachine>>>;
    findVMs(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VirtualMachine>>>;
    /**
     *
     * Finds the function identified by the given id parameter
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getFunction(id: string, observe?: 'body', reportProgress?: boolean): Observable<ModelFunction>;
    getFunction(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelFunction>>;
    getFunction(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelFunction>>;
    /**
     *
     * Retrieves the hardware with the given id.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getHardware(id: string, observe?: 'body', reportProgress?: boolean): Observable<Hardware>;
    getHardware(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Hardware>>;
    getHardware(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Hardware>>;
    /**
     *
     * Retrieves the image with the given id.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getImage(id: string, observe?: 'body', reportProgress?: boolean): Observable<Image>;
    getImage(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Image>>;
    getImage(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Image>>;
    /**
     *
     * Retrieves the location with the given id.
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getLocation(id: string, observe?: 'body', reportProgress?: boolean): Observable<Location>;
    getLocation(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Location>>;
    getLocation(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Location>>;
    /**
     *
     * Finds the virtual machine identified by the given id parameter
     * @param id Unique identifier of the resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getVM(id: string, observe?: 'body', reportProgress?: boolean): Observable<VirtualMachine>;
    getVM(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VirtualMachine>>;
    getVM(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VirtualMachine>>;
}

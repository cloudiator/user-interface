{"version":3,"file":"cloudiator-rest-api.js","sources":["ng://cloudiator-rest-api/encoder.ts","ng://cloudiator-rest-api/variables.ts","ng://cloudiator-rest-api/configuration.ts","ng://cloudiator-rest-api/api/cloud.service.ts","ng://cloudiator-rest-api/api/job.service.ts","ng://cloudiator-rest-api/api/matchmaking.service.ts","ng://cloudiator-rest-api/api/misc.service.ts","ng://cloudiator-rest-api/api/monitoring.service.ts","ng://cloudiator-rest-api/api/node.service.ts","ng://cloudiator-rest-api/api/process.service.ts","ng://cloudiator-rest-api/api/queue.service.ts","ng://cloudiator-rest-api/api/scale.service.ts","ng://cloudiator-rest-api/api/security.service.ts","ng://cloudiator-rest-api/api/user.service.ts","ng://cloudiator-rest-api/api/yaml.service.ts","ng://cloudiator-rest-api/api/api.ts","ng://cloudiator-rest-api/model/cloudType.ts","ng://cloudiator-rest-api/model/cloudiatorProcess.ts","ng://cloudiator-rest-api/model/dataSink.ts","ng://cloudiator-rest-api/model/discoveryItemState.ts","ng://cloudiator-rest-api/model/interval.ts","ng://cloudiator-rest-api/model/ipAddressType.ts","ng://cloudiator-rest-api/model/ipVersion.ts","ng://cloudiator-rest-api/model/location.ts","ng://cloudiator-rest-api/model/monitoringTarget.ts","ng://cloudiator-rest-api/model/newPlatform.ts","ng://cloudiator-rest-api/model/newPlatformRuntime.ts","ng://cloudiator-rest-api/model/nodeCandidate.ts","ng://cloudiator-rest-api/model/operatingSystemArchitecture.ts","ng://cloudiator-rest-api/model/operatingSystemFamily.ts","ng://cloudiator-rest-api/model/operatingSystemType.ts","ng://cloudiator-rest-api/model/optimization.ts","ng://cloudiator-rest-api/model/processMapping.ts","ng://cloudiator-rest-api/model/queueStatus.ts","ng://cloudiator-rest-api/model/requirementOperator.ts","ng://cloudiator-rest-api/model/runtime.ts","ng://cloudiator-rest-api/model/scale.ts","ng://cloudiator-rest-api/model/scheduleNew.ts","ng://cloudiator-rest-api/model/tool.ts","ng://cloudiator-rest-api/model/virtualMachine.ts","ng://cloudiator-rest-api/model/attributeOptimization.ts","ng://cloudiator-rest-api/model/cloud.ts","ng://cloudiator-rest-api/model/lanceInterface.ts","ng://cloudiator-rest-api/model/node.ts","ng://cloudiator-rest-api/model/periodicBehaviour.ts","ng://cloudiator-rest-api/model/platform.ts","ng://cloudiator-rest-api/model/platformRuntime.ts","ng://cloudiator-rest-api/model/schedule.ts","ng://cloudiator-rest-api/api/platform.service.ts","ng://cloudiator-rest-api/api.module.ts"],"sourcesContent":["    import { HttpUrlEncodingCodec } from '@angular/common/http';\r\n\r\n/**\r\n* CustomHttpUrlEncodingCodec\r\n* Fix plus sign (+) not encoding, so sent as blank space\r\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\r\n*/\r\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\r\n    encodeKey(k: string): string {\r\n        k = super.encodeKey(k);\r\n        return k.replace(/\\+/gi, '%2B');\r\n    }\r\n    encodeValue(v: string): string {\r\n        v = super.encodeValue(v);\r\n        return v.replace(/\\+/gi, '%2B');\r\n    }\r\n}\r\n\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const BASE_PATH = new InjectionToken<string>('basePath');\r\nexport const COLLECTION_FORMATS = {\r\n    'csv': ',',\r\n    'tsv': '   ',\r\n    'ssv': ' ',\r\n    'pipes': '|'\r\n}\r\n","export interface ConfigurationParameters {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n}\r\n\r\nexport class Configuration {\r\n    apiKeys?: {[ key: string ]: string};\r\n    username?: string;\r\n    password?: string;\r\n    accessToken?: string | (() => string);\r\n    basePath?: string;\r\n    withCredentials?: boolean;\r\n\r\n    constructor(configurationParameters: ConfigurationParameters = {}) {\r\n        this.apiKeys = configurationParameters.apiKeys;\r\n        this.username = configurationParameters.username;\r\n        this.password = configurationParameters.password;\r\n        this.accessToken = configurationParameters.accessToken;\r\n        this.basePath = configurationParameters.basePath;\r\n        this.withCredentials = configurationParameters.withCredentials;\r\n    }\r\n\r\n    /**\r\n     * Select the correct content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param contentTypes - the array of content types that are available for selection\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\r\n        if (contentTypes.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = contentTypes.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return contentTypes[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Select the correct accept content-type to use for a request.\r\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\r\n     * If no content type is found return the first found type if the contentTypes is not empty\r\n     * @param accepts - the array of content types that are available for selection.\r\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\r\n     */\r\n    public selectHeaderAccept(accepts: string[]): string | undefined {\r\n        if (accepts.length == 0) {\r\n            return undefined;\r\n        }\r\n\r\n        let type = accepts.find(x => this.isJsonMime(x));\r\n        if (type === undefined) {\r\n            return accepts[0];\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    public isJsonMime(mime: string): boolean {\r\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\r\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\r\n    }\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Cloud } from '../model/cloud';\r\nimport { Hardware } from '../model/hardware';\r\nimport { Image } from '../model/image';\r\nimport { Location } from '../model/location';\r\nimport { ModelFunction } from '../model/modelFunction';\r\nimport { NewCloud } from '../model/newCloud';\r\nimport { Queue } from '../model/queue';\r\nimport { VirtualMachine } from '../model/virtualMachine';\r\nimport { VirtualMachineRequest } from '../model/virtualMachineRequest';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class CloudService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Creates a new cloud.\r\n     * @param cloud Cloud to add\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addCloud(cloud: NewCloud, observe?: 'body', reportProgress?: boolean): Observable<Cloud>;\r\n    public addCloud(cloud: NewCloud, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cloud>>;\r\n    public addCloud(cloud: NewCloud, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cloud>>;\r\n    public addCloud(cloud: NewCloud, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (cloud === null || cloud === undefined) {\r\n            throw new Error('Required parameter cloud was null or undefined when calling addCloud.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Cloud>(`${this.basePath}/clouds`,\r\n            cloud,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Creates a new virtual machine request\r\n     * @param virtualMachineRequest VirtualMachine Request\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addVM(virtualMachineRequest: VirtualMachineRequest, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public addVM(virtualMachineRequest: VirtualMachineRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public addVM(virtualMachineRequest: VirtualMachineRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public addVM(virtualMachineRequest: VirtualMachineRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (virtualMachineRequest === null || virtualMachineRequest === undefined) {\r\n            throw new Error('Required parameter virtualMachineRequest was null or undefined when calling addVM.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Queue>(`${this.basePath}/vm`,\r\n            virtualMachineRequest,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the cloud identified by the given id paramater. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteCloud(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public deleteCloud(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public deleteCloud(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public deleteCloud(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteCloud.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.delete<any>(`${this.basePath}/clouds/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Gets the status of the discovery engine \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public discoveryStatus(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;\r\n    public discoveryStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;\r\n    public discoveryStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;\r\n    public discoveryStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<{ [key: string]: string; }>(`${this.basePath}/discovery/status`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Updates a specific hardware \r\n     * @param id Unique identifier of the resource\r\n     * @param hardware Hardware to update \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public editHardware(id: string, hardware: Hardware, observe?: 'body', reportProgress?: boolean): Observable<Hardware>;\r\n    public editHardware(id: string, hardware: Hardware, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Hardware>>;\r\n    public editHardware(id: string, hardware: Hardware, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Hardware>>;\r\n    public editHardware(id: string, hardware: Hardware, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling editHardware.');\r\n        }\r\n\r\n        if (hardware === null || hardware === undefined) {\r\n            throw new Error('Required parameter hardware was null or undefined when calling editHardware.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<Hardware>(`${this.basePath}/hardware/${encodeURIComponent(String(id))}`,\r\n            hardware,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Updates a specific image \r\n     * @param id Unique identifier of the resource\r\n     * @param image Image to update \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public editImage(id: string, image: Image, observe?: 'body', reportProgress?: boolean): Observable<Image>;\r\n    public editImage(id: string, image: Image, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Image>>;\r\n    public editImage(id: string, image: Image, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Image>>;\r\n    public editImage(id: string, image: Image, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling editImage.');\r\n        }\r\n\r\n        if (image === null || image === undefined) {\r\n            throw new Error('Required parameter image was null or undefined when calling editImage.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<Image>(`${this.basePath}/images/${encodeURIComponent(String(id))}`,\r\n            image,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Updates a specific location \r\n     * @param id Unique identifier of the resource\r\n     * @param location Location to update \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public editLocation(id: string, location: Location, observe?: 'body', reportProgress?: boolean): Observable<Location>;\r\n    public editLocation(id: string, location: Location, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Location>>;\r\n    public editLocation(id: string, location: Location, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Location>>;\r\n    public editLocation(id: string, location: Location, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling editLocation.');\r\n        }\r\n\r\n        if (location === null || location === undefined) {\r\n            throw new Error('Required parameter location was null or undefined when calling editLocation.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<Location>(`${this.basePath}/locations/${encodeURIComponent(String(id))}`,\r\n            location,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the cloud identified by the given id parameter \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findCloud(id: string, observe?: 'body', reportProgress?: boolean): Observable<Cloud>;\r\n    public findCloud(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Cloud>>;\r\n    public findCloud(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Cloud>>;\r\n    public findCloud(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findCloud.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Cloud>(`${this.basePath}/clouds/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all clouds from the system that the user has access to \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findClouds(observe?: 'body', reportProgress?: boolean): Observable<Array<Cloud>>;\r\n    public findClouds(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Cloud>>>;\r\n    public findClouds(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Cloud>>>;\r\n    public findClouds(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Cloud>>(`${this.basePath}/clouds`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Finds all functions the user has access to\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findFunctions(observe?: 'body', reportProgress?: boolean): Observable<Array<ModelFunction>>;\r\n    public findFunctions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ModelFunction>>>;\r\n    public findFunctions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ModelFunction>>>;\r\n    public findFunctions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<Array<ModelFunction>>(`${this.basePath}/function`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all hardware visible to the user \r\n     * @param cloudId (Optional) Unique identifier to filter a specific cloud\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findHardware(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Hardware>>;\r\n    public findHardware(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Hardware>>>;\r\n    public findHardware(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Hardware>>>;\r\n    public findHardware(cloudId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (cloudId !== undefined && cloudId !== null) {\r\n            queryParameters = queryParameters.set('cloudId', <any>cloudId);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Hardware>>(`${this.basePath}/hardware`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all images visable to the user \r\n     * @param cloudId (Optional) Unique identifier to filter a specific cloud\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findImages(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Image>>;\r\n    public findImages(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Image>>>;\r\n    public findImages(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Image>>>;\r\n    public findImages(cloudId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (cloudId !== undefined && cloudId !== null) {\r\n            queryParameters = queryParameters.set('cloudId', <any>cloudId);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Image>>(`${this.basePath}/images`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all locations visible to the user \r\n     * @param cloudId (Optional) Unique identifier to filter a specific cloud\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findLocations(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Location>>;\r\n    public findLocations(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Location>>>;\r\n    public findLocations(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Location>>>;\r\n    public findLocations(cloudId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (cloudId !== undefined && cloudId !== null) {\r\n            queryParameters = queryParameters.set('cloudId', <any>cloudId);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Location>>(`${this.basePath}/locations`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Finds all virtual machines the user has access to\r\n     * @param cloudId (Optional) Unique identifier to filter a specific cloud\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findVMs(cloudId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<VirtualMachine>>;\r\n    public findVMs(cloudId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<VirtualMachine>>>;\r\n    public findVMs(cloudId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<VirtualMachine>>>;\r\n    public findVMs(cloudId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (cloudId !== undefined && cloudId !== null) {\r\n            queryParameters = queryParameters.set('cloudId', <any>cloudId);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<Array<VirtualMachine>>(`${this.basePath}/vm`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Finds the function identified by the given id parameter\r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getFunction(id: string, observe?: 'body', reportProgress?: boolean): Observable<ModelFunction>;\r\n    public getFunction(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ModelFunction>>;\r\n    public getFunction(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ModelFunction>>;\r\n    public getFunction(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getFunction.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<ModelFunction>(`${this.basePath}/function/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the hardware with the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getHardware(id: string, observe?: 'body', reportProgress?: boolean): Observable<Hardware>;\r\n    public getHardware(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Hardware>>;\r\n    public getHardware(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Hardware>>;\r\n    public getHardware(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getHardware.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<Hardware>(`${this.basePath}/hardware/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the image with the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getImage(id: string, observe?: 'body', reportProgress?: boolean): Observable<Image>;\r\n    public getImage(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Image>>;\r\n    public getImage(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Image>>;\r\n    public getImage(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getImage.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<Image>(`${this.basePath}/images/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the location with the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getLocation(id: string, observe?: 'body', reportProgress?: boolean): Observable<Location>;\r\n    public getLocation(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Location>>;\r\n    public getLocation(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Location>>;\r\n    public getLocation(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getLocation.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<Location>(`${this.basePath}/locations/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Finds the virtual machine identified by the given id parameter\r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getVM(id: string, observe?: 'body', reportProgress?: boolean): Observable<VirtualMachine>;\r\n    public getVM(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VirtualMachine>>;\r\n    public getVM(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VirtualMachine>>;\r\n    public getVM(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getVM.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<VirtualMachine>(`${this.basePath}/vm/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Job } from '../model/job';\r\nimport { JobNew } from '../model/jobNew';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class JobService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Creates a new job\r\n     * @param job Job to be created. \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addJob(job: JobNew, observe?: 'body', reportProgress?: boolean): Observable<Job>;\r\n    public addJob(job: JobNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Job>>;\r\n    public addJob(job: JobNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Job>>;\r\n    public addJob(job: JobNew, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (job === null || job === undefined) {\r\n            throw new Error('Required parameter job was null or undefined when calling addJob.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Job>(`${this.basePath}/jobs`,\r\n            job,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the job with the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findJob(id: string, observe?: 'body', reportProgress?: boolean): Observable<Job>;\r\n    public findJob(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Job>>;\r\n    public findJob(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Job>>;\r\n    public findJob(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findJob.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Job>(`${this.basePath}/jobs/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all jobs visible to the user \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findJobs(observe?: 'body', reportProgress?: boolean): Observable<Array<Job>>;\r\n    public findJobs(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Job>>>;\r\n    public findJobs(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Job>>>;\r\n    public findJobs(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Job>>(`${this.basePath}/jobs`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns a json graph representation usable by cyctoscape.js \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public jobGraph(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public jobGraph(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public jobGraph(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public jobGraph(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling jobGraph.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<any>(`${this.basePath}/jobs/${encodeURIComponent(String(id))}/graph`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { NodeCandidate } from '../model/nodeCandidate';\r\nimport { NodeRequirements } from '../model/nodeRequirements';\r\nimport { Queue } from '../model/queue';\r\nimport { Requirement } from '../model/requirement';\r\nimport { Solution } from '../model/solution';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class MatchmakingService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Returns possible node candidates. \r\n     * @param nodeRequirements Node Request \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findNodeCandidates(nodeRequirements?: Array<Requirement>, observe?: 'body', reportProgress?: boolean): Observable<Array<NodeCandidate>>;\r\n    public findNodeCandidates(nodeRequirements?: Array<Requirement>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<NodeCandidate>>>;\r\n    public findNodeCandidates(nodeRequirements?: Array<Requirement>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<NodeCandidate>>>;\r\n    public findNodeCandidates(nodeRequirements?: Array<Requirement>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Array<NodeCandidate>>(`${this.basePath}/nodeCandidates`,\r\n            nodeRequirements,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the node candidate with the given id if it exists. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getNodeCandidate(id: string, observe?: 'body', reportProgress?: boolean): Observable<NodeCandidate>;\r\n    public getNodeCandidate(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NodeCandidate>>;\r\n    public getNodeCandidate(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NodeCandidate>>;\r\n    public getNodeCandidate(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getNodeCandidate.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<NodeCandidate>(`${this.basePath}/nodeCandidates/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns a solution of the matchmaking process (if it is still available) \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getSolution(id: string, observe?: 'body', reportProgress?: boolean): Observable<Solution>;\r\n    public getSolution(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Solution>>;\r\n    public getSolution(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Solution>>;\r\n    public getSolution(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getSolution.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.get<Solution>(`${this.basePath}/solution/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Solves a matchmaking problem\r\n     * @param nodeRequirements The requirements with respect to nodes\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public solveMatchmaking(nodeRequirements: NodeRequirements, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public solveMatchmaking(nodeRequirements: NodeRequirements, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public solveMatchmaking(nodeRequirements: NodeRequirements, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public solveMatchmaking(nodeRequirements: NodeRequirements, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (nodeRequirements === null || nodeRequirements === undefined) {\r\n            throw new Error('Required parameter nodeRequirements was null or undefined when calling solveMatchmaking.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<Queue>(`${this.basePath}/matchmaking`,\r\n            nodeRequirements,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { InstallationRequest } from '../model/installationRequest';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class MiscService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Installs Cloudiator tools on provided node\r\n     * @param installRequest a request to install the cloudiator tools on a provided node\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public installTools(installRequest: InstallationRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public installTools(installRequest: InstallationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public installTools(installRequest: InstallationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public installTools(installRequest: InstallationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (installRequest === null || installRequest === undefined) {\r\n            throw new Error('Required parameter installRequest was null or undefined when calling installTools.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<any>(`${this.basePath}/installer`,\r\n            installRequest,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Monitor } from '../model/monitor';\r\nimport { MonitoringTarget } from '../model/monitoringTarget';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class MonitoringService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Creates a monitor \r\n     * @param monitor Monitor to be created \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addMonitor(monitor: Monitor, observe?: 'body', reportProgress?: boolean): Observable<Monitor>;\r\n    public addMonitor(monitor: Monitor, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Monitor>>;\r\n    public addMonitor(monitor: Monitor, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Monitor>>;\r\n    public addMonitor(monitor: Monitor, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (monitor === null || monitor === undefined) {\r\n            throw new Error('Required parameter monitor was null or undefined when calling addMonitor.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Monitor>(`${this.basePath}/monitors`,\r\n            monitor,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the monitor identified by the given metric name. \r\n     * @param metric Unique identifier of a monitor\r\n     * @param target Target of the Monitor \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteMonitor(metric: string, target: MonitoringTarget, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public deleteMonitor(metric: string, target: MonitoringTarget, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public deleteMonitor(metric: string, target: MonitoringTarget, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public deleteMonitor(metric: string, target: MonitoringTarget, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (metric === null || metric === undefined) {\r\n            throw new Error('Required parameter metric was null or undefined when calling deleteMonitor.');\r\n        }\r\n\r\n        if (target === null || target === undefined) {\r\n            throw new Error('Required parameter target was null or undefined when calling deleteMonitor.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.delete<any>(`${this.basePath}/monitors/${encodeURIComponent(String(metric))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all monitors visible to the user \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findMonitors(observe?: 'body', reportProgress?: boolean): Observable<Array<Monitor>>;\r\n    public findMonitors(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Monitor>>>;\r\n    public findMonitors(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Monitor>>>;\r\n    public findMonitors(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Monitor>>(`${this.basePath}/monitors`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the monitor with the given metric name \r\n     * @param metric Unique identifier of a monitor\r\n     * @param target Target of the Monitor \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getMonitor(metric: string, target: MonitoringTarget, observe?: 'body', reportProgress?: boolean): Observable<Monitor>;\r\n    public getMonitor(metric: string, target: MonitoringTarget, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Monitor>>;\r\n    public getMonitor(metric: string, target: MonitoringTarget, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Monitor>>;\r\n    public getMonitor(metric: string, target: MonitoringTarget, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (metric === null || metric === undefined) {\r\n            throw new Error('Required parameter metric was null or undefined when calling getMonitor.');\r\n        }\r\n\r\n        if (target === null || target === undefined) {\r\n            throw new Error('Required parameter target was null or undefined when calling getMonitor.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.get<Monitor>(`${this.basePath}/monitors/${encodeURIComponent(String(metric))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Updating a monitor \r\n     * @param metric Unique identifier of a monitor\r\n     * @param monitor Monitor to be updated \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public updateMonitor(metric: string, monitor: Monitor, observe?: 'body', reportProgress?: boolean): Observable<Monitor>;\r\n    public updateMonitor(metric: string, monitor: Monitor, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Monitor>>;\r\n    public updateMonitor(metric: string, monitor: Monitor, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Monitor>>;\r\n    public updateMonitor(metric: string, monitor: Monitor, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (metric === null || metric === undefined) {\r\n            throw new Error('Required parameter metric was null or undefined when calling updateMonitor.');\r\n        }\r\n\r\n        if (monitor === null || monitor === undefined) {\r\n            throw new Error('Required parameter monitor was null or undefined when calling updateMonitor.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<Monitor>(`${this.basePath}/monitors/${encodeURIComponent(String(metric))}`,\r\n            monitor,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { ByonNode } from '../model/byonNode';\r\nimport { NewNode } from '../model/newNode';\r\nimport { Node } from '../model/node';\r\nimport { NodeRequest } from '../model/nodeRequest';\r\nimport { Queue } from '../model/queue';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class NodeService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Registers an already existing node for usage\r\n     * @param newNode Node to be registered\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addByon(newNode: NewNode, observe?: 'body', reportProgress?: boolean): Observable<ByonNode>;\r\n    public addByon(newNode: NewNode, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ByonNode>>;\r\n    public addByon(newNode: NewNode, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ByonNode>>;\r\n    public addByon(newNode: NewNode, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (newNode === null || newNode === undefined) {\r\n            throw new Error('Required parameter newNode was null or undefined when calling addByon.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<ByonNode>(`${this.basePath}/byon`,\r\n            newNode,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Create a new node request\r\n     * @param nodeRequest Node Request\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addNode(nodeRequest: NodeRequest, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public addNode(nodeRequest: NodeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public addNode(nodeRequest: NodeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public addNode(nodeRequest: NodeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (nodeRequest === null || nodeRequest === undefined) {\r\n            throw new Error('Required parameter nodeRequest was null or undefined when calling addNode.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Queue>(`${this.basePath}/node`,\r\n            nodeRequest,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the already existing node from cloudiator, if not allocated.\r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteByon(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public deleteByon(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public deleteByon(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public deleteByon(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteByon.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.delete<Queue>(`${this.basePath}/byon/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the node with the given id.\r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteNode(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public deleteNode(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public deleteNode(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public deleteNode(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteNode.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.delete<Queue>(`${this.basePath}/node/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieve all BYONs the current user has access to\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findByons(observe?: 'body', reportProgress?: boolean): Observable<Array<ByonNode>>;\r\n    public findByons(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ByonNode>>>;\r\n    public findByons(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ByonNode>>>;\r\n    public findByons(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<ByonNode>>(`${this.basePath}/byon`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieve all nodes the current user has access to\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findNodes(observe?: 'body', reportProgress?: boolean): Observable<Array<Node>>;\r\n    public findNodes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Node>>>;\r\n    public findNodes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Node>>>;\r\n    public findNodes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Node>>(`${this.basePath}/node`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the node with the given id.\r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getNode(id: string, observe?: 'body', reportProgress?: boolean): Observable<Node>;\r\n    public getNode(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Node>>;\r\n    public getNode(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Node>>;\r\n    public getNode(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling getNode.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Node>(`${this.basePath}/node/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { CloudiatorProcess } from '../model/cloudiatorProcess';\r\nimport { CloudiatorProcessNew } from '../model/cloudiatorProcessNew';\r\nimport { Queue } from '../model/queue';\r\nimport { Schedule } from '../model/schedule';\r\nimport { ScheduleNew } from '../model/scheduleNew';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class ProcessService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Creates a new schedule \r\n     * @param schedule Schedule to be created \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addSchedule(schedule: ScheduleNew, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public addSchedule(schedule: ScheduleNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public addSchedule(schedule: ScheduleNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public addSchedule(schedule: ScheduleNew, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (schedule === null || schedule === undefined) {\r\n            throw new Error('Required parameter schedule was null or undefined when calling addSchedule.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Queue>(`${this.basePath}/schedule`,\r\n            schedule,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Creates a new process \r\n     * @param process Process to be created \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public createProcess(process: CloudiatorProcessNew, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public createProcess(process: CloudiatorProcessNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public createProcess(process: CloudiatorProcessNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public createProcess(process: CloudiatorProcessNew, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (process === null || process === undefined) {\r\n            throw new Error('Required parameter process was null or undefined when calling createProcess.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Queue>(`${this.basePath}/process`,\r\n            process,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the process corresponding to the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteProcess(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public deleteProcess(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public deleteProcess(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public deleteProcess(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteProcess.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.delete<Queue>(`${this.basePath}/process/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the schedule identified by the given id and all corresponding processes and nodes. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteSchedule(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public deleteSchedule(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public deleteSchedule(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public deleteSchedule(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deleteSchedule.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.delete<Queue>(`${this.basePath}/schedule/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Finds the process corresponding to the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findProcess(id: string, observe?: 'body', reportProgress?: boolean): Observable<CloudiatorProcess>;\r\n    public findProcess(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CloudiatorProcess>>;\r\n    public findProcess(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CloudiatorProcess>>;\r\n    public findProcess(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findProcess.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<CloudiatorProcess>(`${this.basePath}/process/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the schedule identified by parameter id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findSchedule(id: string, observe?: 'body', reportProgress?: boolean): Observable<Schedule>;\r\n    public findSchedule(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Schedule>>;\r\n    public findSchedule(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Schedule>>;\r\n    public findSchedule(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findSchedule.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Schedule>(`${this.basePath}/schedule/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves all process of the current user matching the parameters. \r\n     * @param scheduleId Id of the schedule. \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getProcesses(scheduleId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<CloudiatorProcess>>;\r\n    public getProcesses(scheduleId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CloudiatorProcess>>>;\r\n    public getProcesses(scheduleId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CloudiatorProcess>>>;\r\n    public getProcesses(scheduleId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\r\n        if (scheduleId !== undefined && scheduleId !== null) {\r\n            queryParameters = queryParameters.set('scheduleId', <any>scheduleId);\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<CloudiatorProcess>>(`${this.basePath}/process`,\r\n            {\r\n                params: queryParameters,\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves all schedules by the current user. \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getSchedules(observe?: 'body', reportProgress?: boolean): Observable<Array<Schedule>>;\r\n    public getSchedules(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Schedule>>>;\r\n    public getSchedules(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Schedule>>>;\r\n    public getSchedules(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Schedule>>(`${this.basePath}/schedule`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns a json graph representation usable by cyctoscape.js \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public scheduleGraph(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public scheduleGraph(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public scheduleGraph(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public scheduleGraph(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling scheduleGraph.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<any>(`${this.basePath}/schedule/${encodeURIComponent(String(id))}/graph`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Queue } from '../model/queue';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class QueueService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Returns the queued task with the given id. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findQueuedTask(id: string, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public findQueuedTask(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public findQueuedTask(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public findQueuedTask(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findQueuedTask.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Queue>(`${this.basePath}/queue/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all running queued tasks visible to the user \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public getQueuedTasks(observe?: 'body', reportProgress?: boolean): Observable<Array<Queue>>;\r\n    public getQueuedTasks(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Queue>>>;\r\n    public getQueuedTasks(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Queue>>>;\r\n    public getQueuedTasks(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Queue>>(`${this.basePath}/queue`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Queue } from '../model/queue';\r\nimport { Scale } from '../model/scale';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class ScaleService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Triggers a new scaling action \r\n     * @param scale Scaling action to be executed \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public triggerScale(scale: Scale, observe?: 'body', reportProgress?: boolean): Observable<Queue>;\r\n    public triggerScale(scale: Scale, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Queue>>;\r\n    public triggerScale(scale: Scale, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Queue>>;\r\n    public triggerScale(scale: Scale, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (scale === null || scale === undefined) {\r\n            throw new Error('Required parameter scale was null or undefined when calling triggerScale.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Queue>(`${this.basePath}/scale`,\r\n            scale,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Text } from '../model/text';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class SecurityService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Decrypts the given string\r\n     * @param text Text to decrypt\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public decrypt(text: string, observe?: 'body', reportProgress?: boolean): Observable<Text>;\r\n    public decrypt(text: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Text>>;\r\n    public decrypt(text: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Text>>;\r\n    public decrypt(text: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (text === null || text === undefined) {\r\n            throw new Error('Required parameter text was null or undefined when calling decrypt.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Text>(`${this.basePath}/decryption/${encodeURIComponent(String(text))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param key Key of the stored variable \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deleteSecure(key: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public deleteSecure(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public deleteSecure(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public deleteSecure(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (key === null || key === undefined) {\r\n            throw new Error('Required parameter key was null or undefined when calling deleteSecure.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.delete<any>(`${this.basePath}/secureStore/${encodeURIComponent(String(key))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Encrypts the given string\r\n     * @param text Text to encrypt\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public encrypt(text: string, observe?: 'body', reportProgress?: boolean): Observable<Text>;\r\n    public encrypt(text: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Text>>;\r\n    public encrypt(text: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Text>>;\r\n    public encrypt(text: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (text === null || text === undefined) {\r\n            throw new Error('Required parameter text was null or undefined when calling encrypt.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Text>(`${this.basePath}/encryption/${encodeURIComponent(String(text))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Retrieves the stored value. \r\n     * @param key Key of the stored variable \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public retrieveSecure(key: string, observe?: 'body', reportProgress?: boolean): Observable<Text>;\r\n    public retrieveSecure(key: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Text>>;\r\n    public retrieveSecure(key: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Text>>;\r\n    public retrieveSecure(key: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (key === null || key === undefined) {\r\n            throw new Error('Required parameter key was null or undefined when calling retrieveSecure.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Text>(`${this.basePath}/secureStore/${encodeURIComponent(String(key))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param key Key of the stored variable \r\n     * @param value Value of the stored variable \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public storeSecure(key: string, value: Text, observe?: 'body', reportProgress?: boolean): Observable<Text>;\r\n    public storeSecure(key: string, value: Text, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Text>>;\r\n    public storeSecure(key: string, value: Text, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Text>>;\r\n    public storeSecure(key: string, value: Text, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (key === null || key === undefined) {\r\n            throw new Error('Required parameter key was null or undefined when calling storeSecure.');\r\n        }\r\n\r\n        if (value === null || value === undefined) {\r\n            throw new Error('Required parameter value was null or undefined when calling storeSecure.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.put<Text>(`${this.basePath}/secureStore/${encodeURIComponent(String(key))}`,\r\n            value,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Login } from '../model/login';\r\nimport { Tenant } from '../model/tenant';\r\nimport { Token } from '../model/token';\r\nimport { User } from '../model/user';\r\nimport { UserNew } from '../model/userNew';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Creates a new tenant \r\n     * @param tenant Tenant creation request \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public createTenant(tenant?: Tenant, observe?: 'body', reportProgress?: boolean): Observable<Tenant>;\r\n    public createTenant(tenant?: Tenant, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Tenant>>;\r\n    public createTenant(tenant?: Tenant, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Tenant>>;\r\n    public createTenant(tenant?: Tenant, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Tenant>(`${this.basePath}/tenants`,\r\n            tenant,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Creates a new user \r\n     * @param user User creation request \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public createUser(user?: UserNew, observe?: 'body', reportProgress?: boolean): Observable<User>;\r\n    public createUser(user?: UserNew, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;\r\n    public createUser(user?: UserNew, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;\r\n    public createUser(user?: UserNew, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<User>(`${this.basePath}/users`,\r\n            user,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Authenticates a user \r\n     * @param login User login request \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public login(login?: Login, observe?: 'body', reportProgress?: boolean): Observable<Token>;\r\n    public login(login?: Login, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Token>>;\r\n    public login(login?: Login, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Token>>;\r\n    public login(login?: Login, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Token>(`${this.basePath}/login`,\r\n            login,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { Job } from '../model/job';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class YamlService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param yaml YAML payload\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public parseYAML(yaml: string, observe?: 'body', reportProgress?: boolean): Observable<Job>;\r\n    public parseYAML(yaml: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Job>>;\r\n    public parseYAML(yaml: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Job>>;\r\n    public parseYAML(yaml: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (yaml === null || yaml === undefined) {\r\n            throw new Error('Required parameter yaml was null or undefined when calling parseYAML.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/yaml'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Job>(`${this.basePath}/yaml`,\r\n            yaml,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","export * from './cloud.service';\r\nimport { CloudService } from './cloud.service';\r\nexport * from './job.service';\r\nimport { JobService } from './job.service';\r\nexport * from './matchmaking.service';\r\nimport { MatchmakingService } from './matchmaking.service';\r\nexport * from './misc.service';\r\nimport { MiscService } from './misc.service';\r\nexport * from './monitoring.service';\r\nimport { MonitoringService } from './monitoring.service';\r\nexport * from './node.service';\r\nimport { NodeService } from './node.service';\r\n// export * from './platform.service';\r\n// import { PlatformService } from './platform.service';\r\nexport * from './process.service';\r\nimport { ProcessService } from './process.service';\r\nexport * from './queue.service';\r\nimport { QueueService } from './queue.service';\r\nexport * from './scale.service';\r\nimport { ScaleService } from './scale.service';\r\nexport * from './security.service';\r\nimport { SecurityService } from './security.service';\r\nexport * from './user.service';\r\nimport { UserService } from './user.service';\r\nexport * from './yaml.service';\r\nimport { YamlService } from './yaml.service';\r\nexport const APIS = [CloudService, JobService, MatchmakingService, MiscService, MonitoringService, NodeService, /*PlatformService*/, ProcessService, QueueService, ScaleService, SecurityService, UserService, YamlService];\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * type of the cloud\r\n */\r\nexport type CloudType = 'PRIVATE' | 'PUBLIC';\r\n\r\nexport const CloudType = {\r\n    PRIVATE: 'PRIVATE' as CloudType,\r\n    PUBLIC: 'PUBLIC' as CloudType\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { IpAddress } from './ipAddress';\r\n\r\n\r\nexport interface CloudiatorProcess { \r\n    id?: string;\r\n    originId?: string;\r\n    processType?: string;\r\n    state?: CloudiatorProcess.StateEnum;\r\n    type?: CloudiatorProcess.TypeEnum;\r\n    /**\r\n     * The id of the schedule this process belongs to.\r\n     */\r\n    schedule?: string;\r\n    /**\r\n     * The id of the task that is instantiated by this process.\r\n     */\r\n    task?: string;\r\n    /**\r\n     * The task interface used for running the process.\r\n     */\r\n    taskInterface?: string;\r\n    /**\r\n     * Diagnostic information about this process\r\n     */\r\n    diagnostic?: string;\r\n    /**\r\n     * Reason this process was created\r\n     */\r\n    reason?: string;\r\n    /**\r\n     * The user this process was created for\r\n     */\r\n    owner?: string;\r\n    /**\r\n     * The public/private ip addresses under which this process is reachable. \r\n     */\r\n    ipAddresses?: Array<IpAddress>;\r\n    /**\r\n     * The endpoint where this process is reachable. \r\n     */\r\n    endpoint?: string;\r\n}\r\nexport namespace CloudiatorProcess {\r\n    export type StateEnum = 'PENDING' | 'RUNNING' | 'ERROR' | 'DELETED' | 'FINISHED';\r\n    export const StateEnum = {\r\n        PENDING: 'PENDING' as StateEnum,\r\n        RUNNING: 'RUNNING' as StateEnum,\r\n        ERROR: 'ERROR' as StateEnum,\r\n        DELETED: 'DELETED' as StateEnum,\r\n        FINISHED: 'FINISHED' as StateEnum\r\n    };\r\n    export type TypeEnum = 'LANCE' | 'SPARK' | 'FAAS' | 'SIMULATION' | 'UNKNOWN';\r\n    export const TypeEnum = {\r\n        LANCE: 'LANCE' as TypeEnum,\r\n        SPARK: 'SPARK' as TypeEnum,\r\n        FAAS: 'FAAS' as TypeEnum,\r\n        SIMULATION: 'SIMULATION' as TypeEnum,\r\n        UNKNOWN: 'UNKNOWN' as TypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Data Sink where the monitoring data will be reported to. \r\n */\r\nexport interface DataSink { \r\n    type?: DataSink.TypeEnum;\r\n    configuration?: any;\r\n}\r\nexport namespace DataSink {\r\n    export type TypeEnum = 'KAIROS_DB' | 'INFLUX' | 'CLI' | 'JMS';\r\n    export const TypeEnum = {\r\n        KAIROSDB: 'KAIROS_DB' as TypeEnum,\r\n        INFLUX: 'INFLUX' as TypeEnum,\r\n        CLI: 'CLI' as TypeEnum,\r\n        JMS: 'JMS' as TypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport type DiscoveryItemState = 'NEW' | 'OK' | 'REMOTELY_DELETED' | 'LOCALLY_DELETED' | 'DISABLED' | 'DELETED' | 'UNKNOWN';\r\n\r\nexport const DiscoveryItemState = {\r\n    NEW: 'NEW' as DiscoveryItemState,\r\n    OK: 'OK' as DiscoveryItemState,\r\n    REMOTELYDELETED: 'REMOTELY_DELETED' as DiscoveryItemState,\r\n    LOCALLYDELETED: 'LOCALLY_DELETED' as DiscoveryItemState,\r\n    DISABLED: 'DISABLED' as DiscoveryItemState,\r\n    DELETED: 'DELETED' as DiscoveryItemState,\r\n    UNKNOWN: 'UNKNOWN' as DiscoveryItemState\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * A time interval consisting of unit and period\r\n */\r\nexport interface Interval { \r\n    /**\r\n     * The unit of the interval\r\n     */\r\n    unit?: Interval.UnitEnum;\r\n    /**\r\n     * The period of the interval\r\n     */\r\n    period?: number;\r\n}\r\nexport namespace Interval {\r\n    export type UnitEnum = 'DAYS' | 'HOURS' | 'MICROSECONDS' | 'MILLISECONDS' | 'MINUTES' | 'NANOSECONDS' | 'SECONDS';\r\n    export const UnitEnum = {\r\n        DAYS: 'DAYS' as UnitEnum,\r\n        HOURS: 'HOURS' as UnitEnum,\r\n        MICROSECONDS: 'MICROSECONDS' as UnitEnum,\r\n        MILLISECONDS: 'MILLISECONDS' as UnitEnum,\r\n        MINUTES: 'MINUTES' as UnitEnum,\r\n        NANOSECONDS: 'NANOSECONDS' as UnitEnum,\r\n        SECONDS: 'SECONDS' as UnitEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport type IpAddressType = 'PUBLIC_IP' | 'PRIVATE_IP';\r\n\r\nexport const IpAddressType = {\r\n    PUBLICIP: 'PUBLIC_IP' as IpAddressType,\r\n    PRIVATEIP: 'PRIVATE_IP' as IpAddressType\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport type IpVersion = 'V4' | 'V6';\r\n\r\nexport const IpVersion = {\r\n    V4: 'V4' as IpVersion,\r\n    V6: 'V6' as IpVersion\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { DiscoveryItemState } from './discoveryItemState';\r\nimport { GeoLocation } from './geoLocation';\r\n\r\n\r\n/**\r\n * Repesents a (virtual) location offers by a cloud \r\n */\r\nexport interface Location { \r\n    /**\r\n     * Unique identifier\r\n     */\r\n    id: string;\r\n    /**\r\n     * Human-readable name\r\n     */\r\n    name: string;\r\n    /**\r\n     * Original id issued by the provider\r\n     */\r\n    providerId: string;\r\n    /**\r\n     * Scope of the location\r\n     */\r\n    locationScope: Location.LocationScopeEnum;\r\n    /**\r\n     * True of the location can be used to start virtual machines, false if not\r\n     */\r\n    isAssignable: boolean;\r\n    geoLocation?: GeoLocation;\r\n    parent?: Location;\r\n    state?: DiscoveryItemState;\r\n    owner?: string;\r\n}\r\nexport namespace Location {\r\n    export type LocationScopeEnum = 'PROVIDER' | 'REGION' | 'ZONE' | 'HOST';\r\n    export const LocationScopeEnum = {\r\n        PROVIDER: 'PROVIDER' as LocationScopeEnum,\r\n        REGION: 'REGION' as LocationScopeEnum,\r\n        ZONE: 'ZONE' as LocationScopeEnum,\r\n        HOST: 'HOST' as LocationScopeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport interface MonitoringTarget { \r\n    /**\r\n     * target to be monitored\r\n     */\r\n    type: MonitoringTarget.TypeEnum;\r\n    /**\r\n     * identifier of a specific instance of the above type\r\n     */\r\n    identifier?: string;\r\n}\r\nexport namespace MonitoringTarget {\r\n    export type TypeEnum = 'JOB' | 'TASK' | 'PROCESS' | 'CLOUD' | 'NODE';\r\n    export const TypeEnum = {\r\n        JOB: 'JOB' as TypeEnum,\r\n        TASK: 'TASK' as TypeEnum,\r\n        PROCESS: 'PROCESS' as TypeEnum,\r\n        CLOUD: 'CLOUD' as TypeEnum,\r\n        NODE: 'NODE' as TypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Api } from './api';\r\nimport { CloudCredential } from './cloudCredential';\r\n\r\n\r\n/**\r\n * Repesents a new PaaS provider to be created \r\n */\r\nexport interface NewPlatform { \r\n    /**\r\n     * Human-readable name\r\n     */\r\n    name: string;\r\n    /**\r\n     * PaaS stack type\r\n     */\r\n    type?: NewPlatform.TypeEnum;\r\n    api: Api;\r\n    credential: CloudCredential;\r\n    /**\r\n     * URI where the api of this platform provider can be accessed.\r\n     */\r\n    endpoint?: string;\r\n}\r\nexport namespace NewPlatform {\r\n    export type TypeEnum = 'HEROKU' | 'OPENSHIFT' | 'CLOUDFOUNDRY';\r\n    export const TypeEnum = {\r\n        HEROKU: 'HEROKU' as TypeEnum,\r\n        OPENSHIFT: 'OPENSHIFT' as TypeEnum,\r\n        CLOUDFOUNDRY: 'CLOUDFOUNDRY' as TypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Represents a runtime for a Platform component, e.g. Java, PHP, Tomcat\r\n */\r\nexport interface NewPlatformRuntime { \r\n    /**\r\n     * human readable name\r\n     */\r\n    name: string;\r\n    /**\r\n     * the specific runtime language\r\n     */\r\n    language: NewPlatformRuntime.LanguageEnum;\r\n    /**\r\n     * language version number\r\n     */\r\n    languageVersion?: number;\r\n    /**\r\n     * specifies the runtime type\r\n     */\r\n    runtimeType: NewPlatformRuntime.RuntimeTypeEnum;\r\n    /**\r\n     * the version of the specified type\r\n     */\r\n    version: number;\r\n}\r\nexport namespace NewPlatformRuntime {\r\n    export type LanguageEnum = 'PHP' | 'JAVA' | 'RUBY' | 'PYTHON';\r\n    export const LanguageEnum = {\r\n        PHP: 'PHP' as LanguageEnum,\r\n        JAVA: 'JAVA' as LanguageEnum,\r\n        RUBY: 'RUBY' as LanguageEnum,\r\n        PYTHON: 'PYTHON' as LanguageEnum\r\n    };\r\n    export type RuntimeTypeEnum = 'standalone' | 'server';\r\n    export const RuntimeTypeEnum = {\r\n        Standalone: 'standalone' as RuntimeTypeEnum,\r\n        Server: 'server' as RuntimeTypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Cloud } from './cloud';\r\nimport { Environment } from './environment';\r\nimport { Hardware } from './hardware';\r\nimport { Image } from './image';\r\nimport { Location } from './location';\r\n\r\n\r\n/**\r\n * A node creatable by the system\r\n */\r\nexport interface NodeCandidate { \r\n    id?: string;\r\n    nodeCandidateType?: NodeCandidate.NodeCandidateTypeEnum;\r\n    price?: number;\r\n    cloud?: Cloud;\r\n    image?: Image;\r\n    hardware?: Hardware;\r\n    location?: Location;\r\n    pricePerInvocation?: number;\r\n    memoryPrice?: number;\r\n    environment?: Environment;\r\n}\r\nexport namespace NodeCandidate {\r\n    export type NodeCandidateTypeEnum = 'IAAS' | 'FAAS' | 'PAAS' | 'BYON';\r\n    export const NodeCandidateTypeEnum = {\r\n        IAAS: 'IAAS' as NodeCandidateTypeEnum,\r\n        FAAS: 'FAAS' as NodeCandidateTypeEnum,\r\n        PAAS: 'PAAS' as NodeCandidateTypeEnum,\r\n        BYON: 'BYON' as NodeCandidateTypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Type of OS Architecture\r\n */\r\nexport type OperatingSystemArchitecture = 'AMD64' | 'UNKOWN' | 'I386' | 'ARM';\r\n\r\nexport const OperatingSystemArchitecture = {\r\n    AMD64: 'AMD64' as OperatingSystemArchitecture,\r\n    UNKOWN: 'UNKOWN' as OperatingSystemArchitecture,\r\n    I386: 'I386' as OperatingSystemArchitecture,\r\n    ARM: 'ARM' as OperatingSystemArchitecture\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Type of OS Family\r\n */\r\nexport type OperatingSystemFamily = 'UBUNTU' | 'UNKOWN_OS_FAMILY' | 'AIX' | 'ARCH' | 'CENTOS' | 'DARWIN' | 'DEBIAN' | 'ESX' | 'FEDORA' | 'FREEBSD' | 'GENTOO' | 'HPUX' | 'COREOS' | 'AMZN_LINUX' | 'MANDRIVA' | 'NETBSD' | 'OEL' | 'OPENBSD' | 'RHEL' | 'SCIENTIFIC' | 'CEL' | 'SLACKWARE' | 'SOLARIS' | 'SUSE' | 'TURBOLINUX' | 'CLOUD_LINUX' | 'WINDOWS';\r\n\r\nexport const OperatingSystemFamily = {\r\n    UBUNTU: 'UBUNTU' as OperatingSystemFamily,\r\n    UNKOWNOSFAMILY: 'UNKOWN_OS_FAMILY' as OperatingSystemFamily,\r\n    AIX: 'AIX' as OperatingSystemFamily,\r\n    ARCH: 'ARCH' as OperatingSystemFamily,\r\n    CENTOS: 'CENTOS' as OperatingSystemFamily,\r\n    DARWIN: 'DARWIN' as OperatingSystemFamily,\r\n    DEBIAN: 'DEBIAN' as OperatingSystemFamily,\r\n    ESX: 'ESX' as OperatingSystemFamily,\r\n    FEDORA: 'FEDORA' as OperatingSystemFamily,\r\n    FREEBSD: 'FREEBSD' as OperatingSystemFamily,\r\n    GENTOO: 'GENTOO' as OperatingSystemFamily,\r\n    HPUX: 'HPUX' as OperatingSystemFamily,\r\n    COREOS: 'COREOS' as OperatingSystemFamily,\r\n    AMZNLINUX: 'AMZN_LINUX' as OperatingSystemFamily,\r\n    MANDRIVA: 'MANDRIVA' as OperatingSystemFamily,\r\n    NETBSD: 'NETBSD' as OperatingSystemFamily,\r\n    OEL: 'OEL' as OperatingSystemFamily,\r\n    OPENBSD: 'OPENBSD' as OperatingSystemFamily,\r\n    RHEL: 'RHEL' as OperatingSystemFamily,\r\n    SCIENTIFIC: 'SCIENTIFIC' as OperatingSystemFamily,\r\n    CEL: 'CEL' as OperatingSystemFamily,\r\n    SLACKWARE: 'SLACKWARE' as OperatingSystemFamily,\r\n    SOLARIS: 'SOLARIS' as OperatingSystemFamily,\r\n    SUSE: 'SUSE' as OperatingSystemFamily,\r\n    TURBOLINUX: 'TURBOLINUX' as OperatingSystemFamily,\r\n    CLOUDLINUX: 'CLOUD_LINUX' as OperatingSystemFamily,\r\n    WINDOWS: 'WINDOWS' as OperatingSystemFamily\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * OS Type\r\n */\r\nexport type OperatingSystemType = 'LINUX' | 'UNKOWN' | 'UNIX' | 'WINDOWS_OS' | 'BSD' | 'MAC';\r\n\r\nexport const OperatingSystemType = {\r\n    LINUX: 'LINUX' as OperatingSystemType,\r\n    UNKOWN: 'UNKOWN' as OperatingSystemType,\r\n    UNIX: 'UNIX' as OperatingSystemType,\r\n    WINDOWSOS: 'WINDOWS_OS' as OperatingSystemType,\r\n    BSD: 'BSD' as OperatingSystemType,\r\n    MAC: 'MAC' as OperatingSystemType\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Superclass for polymorphism, only subtypes are allowed\r\n */\r\nexport interface Optimization { \r\n    type: string;\r\n    objective?: Optimization.ObjectiveEnum;\r\n}\r\nexport namespace Optimization {\r\n    export type ObjectiveEnum = 'MAXIMIZE' | 'MINIMIZE';\r\n    export const ObjectiveEnum = {\r\n        MAXIMIZE: 'MAXIMIZE' as ObjectiveEnum,\r\n        MINIMIZE: 'MINIMIZE' as ObjectiveEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\nexport type ProcessMapping = 'SINGLE' | 'CLUSTER';\r\n\r\nexport const ProcessMapping = {\r\n    SINGLE: 'SINGLE' as ProcessMapping,\r\n    CLUSTER: 'CLUSTER' as ProcessMapping\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Status of the running task \r\n */\r\nexport type QueueStatus = 'SCHEDULED' | 'RUNNING' | 'COMPLETED' | 'FAILED';\r\n\r\nexport const QueueStatus = {\r\n    SCHEDULED: 'SCHEDULED' as QueueStatus,\r\n    RUNNING: 'RUNNING' as QueueStatus,\r\n    COMPLETED: 'COMPLETED' as QueueStatus,\r\n    FAILED: 'FAILED' as QueueStatus\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Part of AttributeRequirement\r\n */\r\nexport type RequirementOperator = 'EQ' | 'LEQ' | 'GEQ' | 'GT' | 'LT' | 'NEQ' | 'IN';\r\n\r\nexport const RequirementOperator = {\r\n    EQ: 'EQ' as RequirementOperator,\r\n    LEQ: 'LEQ' as RequirementOperator,\r\n    GEQ: 'GEQ' as RequirementOperator,\r\n    GT: 'GT' as RequirementOperator,\r\n    LT: 'LT' as RequirementOperator,\r\n    NEQ: 'NEQ' as RequirementOperator,\r\n    IN: 'IN' as RequirementOperator\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Represents runtime provided by a FaaS platform. \r\n */\r\nexport type Runtime = 'nodejs' | 'python' | 'java' | 'dotnet' | 'go';\r\n\r\nexport const Runtime = {\r\n    Nodejs: 'nodejs' as Runtime,\r\n    Python: 'python' as Runtime,\r\n    Java: 'java' as Runtime,\r\n    Dotnet: 'dotnet' as Runtime,\r\n    Go: 'go' as Runtime\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Scaling action object containing the required information to scale an Cloudiator cluster process \r\n */\r\nexport interface Scale { \r\n    /**\r\n     * The identifier of the schedule\r\n     */\r\n    schedule?: string;\r\n    /**\r\n     * The identifier of the task\r\n     */\r\n    task?: string;\r\n    scaleDirection?: Scale.ScaleDirectionEnum;\r\n    /**\r\n     * An optional list of nodes for the scaling process\r\n     */\r\n    nodes?: Array<string>;\r\n}\r\nexport namespace Scale {\r\n    export type ScaleDirectionEnum = 'SCALE_IN' | 'SCALE_OUT';\r\n    export const ScaleDirectionEnum = {\r\n        IN: 'SCALE_IN' as ScaleDirectionEnum,\r\n        OUT: 'SCALE_OUT' as ScaleDirectionEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * Schedules an already created job within the system. \r\n */\r\nexport interface ScheduleNew { \r\n    /**\r\n     * The identifier of the job\r\n     */\r\n    job?: string;\r\n    /**\r\n     * If the instantiation should be handled AUTOMATIC or MANUAL\r\n     */\r\n    instantiation?: ScheduleNew.InstantiationEnum;\r\n}\r\nexport namespace ScheduleNew {\r\n    export type InstantiationEnum = 'AUTOMATIC' | 'MANUAL';\r\n    export const InstantiationEnum = {\r\n        AUTOMATIC: 'AUTOMATIC' as InstantiationEnum,\r\n        MANUAL: 'MANUAL' as InstantiationEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n\r\n\r\n/**\r\n * a Cloudiator tool to be installed on a node\r\n */\r\nexport type Tool = 'DOCKER' | 'KAIROSDB' | 'LANCE' | 'VISOR' | 'AXE' | 'SPARK_WORKER' | 'DLMS_AGENT' | 'ALLUXIO_CLIENT' | 'EMS_CLIENT';\r\n\r\nexport const Tool = {\r\n    DOCKER: 'DOCKER' as Tool,\r\n    KAIROSDB: 'KAIROSDB' as Tool,\r\n    LANCE: 'LANCE' as Tool,\r\n    VISOR: 'VISOR' as Tool,\r\n    AXE: 'AXE' as Tool,\r\n    SPARKWORKER: 'SPARK_WORKER' as Tool,\r\n    DLMSAGENT: 'DLMS_AGENT' as Tool,\r\n    ALLUXIOCLIENT: 'ALLUXIO_CLIENT' as Tool,\r\n    EMSCLIENT: 'EMS_CLIENT' as Tool\r\n};\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Hardware } from './hardware';\r\nimport { Image } from './image';\r\nimport { IpAddress } from './ipAddress';\r\nimport { Location } from './location';\r\nimport { LoginCredential } from './loginCredential';\r\n\r\n\r\nexport interface VirtualMachine { \r\n    image?: Image;\r\n    hardware?: Hardware;\r\n    location?: Location;\r\n    id?: string;\r\n    ipaddresses?: Array<IpAddress>;\r\n    logincredential?: LoginCredential;\r\n    owner?: string;\r\n    state?: VirtualMachine.StateEnum;\r\n}\r\nexport namespace VirtualMachine {\r\n    export type StateEnum = 'RUNNING' | 'ERROR';\r\n    export const StateEnum = {\r\n        RUNNING: 'RUNNING' as StateEnum,\r\n        ERROR: 'ERROR' as StateEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Optimization } from './optimization';\r\n\r\n\r\n/**\r\n * Refers to the attribute that should be optimized\r\n */\r\nexport interface AttributeOptimization extends Optimization { \r\n    objectiveClass?: string;\r\n    objectiveAttribute?: string;\r\n    aggregation?: AttributeOptimization.AggregationEnum;\r\n}\r\nexport namespace AttributeOptimization {\r\n    export type AggregationEnum = 'SUM' | 'AVG';\r\n    export const AggregationEnum = {\r\n        SUM: 'SUM' as AggregationEnum,\r\n        AVG: 'AVG' as AggregationEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Api } from './api';\r\nimport { CloudConfiguration } from './cloudConfiguration';\r\nimport { CloudCredential } from './cloudCredential';\r\nimport { CloudType } from './cloudType';\r\nimport { NewCloud } from './newCloud';\r\n\r\n\r\n/**\r\n * Representation of a cloud used by Cloudiator \r\n */\r\nexport interface Cloud { \r\n    /**\r\n     * URI where the api of this cloud provider can be accessed.\r\n     */\r\n    endpoint?: string;\r\n    cloudType: CloudType;\r\n    api: Api;\r\n    credential: CloudCredential;\r\n    cloudConfiguration?: CloudConfiguration;\r\n    /**\r\n     * Unique identifier for the cloud\r\n     */\r\n    id?: string;\r\n    /**\r\n     * Id of the user owning this cloud. \r\n     */\r\n    owner?: string;\r\n    /**\r\n     * State of the cloud\r\n     */\r\n    state?: Cloud.StateEnum;\r\n    /**\r\n     * Diagnostic information for the cloud\r\n     */\r\n    diagnostic?: string;\r\n}\r\nexport namespace Cloud {\r\n    export type StateEnum = 'OK' | 'ERROR';\r\n    export const StateEnum = {\r\n        OK: 'OK' as StateEnum,\r\n        ERROR: 'ERROR' as StateEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { OperatingSystem } from './operatingSystem';\r\nimport { TaskInterface } from './taskInterface';\r\n\r\n\r\n/**\r\n * Part of a task. Subtype of TaskInterface. \r\n */\r\nexport interface LanceInterface extends TaskInterface { \r\n    /**\r\n     * The container type that lance should use. Can be DOCKER to force a docker deployment, NATIVE to force a plain container deployment or BOTH to let the system derive the container type. \r\n     */\r\n    containerType?: LanceInterface.ContainerTypeEnum;\r\n    /**\r\n     * Describes the operating system required by this interface. If container type is set to NATIVE, this describes the OS required by the scripts, of container type is set to DOCKER, this describes the OS used to spawn the docker container. \r\n     */\r\n    operatingSystem?: OperatingSystem;\r\n    /**\r\n     * Initialization action. \r\n     */\r\n    init?: string;\r\n    /**\r\n     * Executed before installation action. Can be e.g. used for downloading binaries. \r\n     */\r\n    preInstall?: string;\r\n    /**\r\n     * Used for installing the application. \r\n     */\r\n    install?: string;\r\n    /**\r\n     * Used for configuration of the application component. First action where Lance environment variables are set. \r\n     */\r\n    postInstall?: string;\r\n    /**\r\n     * Called before starting the application. Can be e.g. used for configuration an environment. \r\n     */\r\n    preStart?: string;\r\n    /**\r\n     * Starts the component. Needs to return for PlainContainer and not return for Docker. \r\n     */\r\n    start?: string;\r\n    /**\r\n     * Detects the start of the application. Required if the application does not start instantianous. \r\n     */\r\n    startDetection?: string;\r\n    /**\r\n     * Checks if the application has stopped. Is periodically checked to detect a crash of the application. \r\n     */\r\n    stopDetection?: string;\r\n    /**\r\n     * Executed after the application has successfully started. \r\n     */\r\n    postStart?: string;\r\n    /**\r\n     * Called before the application is stopped. \r\n     */\r\n    preStop?: string;\r\n    /**\r\n     * Stops the application. \r\n     */\r\n    stop?: string;\r\n    /**\r\n     * Executed after the application is successfully stopped. \r\n     */\r\n    postStop?: string;\r\n    /**\r\n     * Executed before the container is shutdown. Can be used to backup state. \r\n     */\r\n    shutdown?: string;\r\n    /**\r\n     * A script that is executed if a new instance of a downstream task is available. \r\n     */\r\n    updateAction?: string;\r\n}\r\nexport namespace LanceInterface {\r\n    export type ContainerTypeEnum = 'NATIVE' | 'DOCKER' | 'BOTH';\r\n    export const ContainerTypeEnum = {\r\n        NATIVE: 'NATIVE' as ContainerTypeEnum,\r\n        DOCKER: 'DOCKER' as ContainerTypeEnum,\r\n        BOTH: 'BOTH' as ContainerTypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { IpAddress } from './ipAddress';\r\nimport { LoginCredential } from './loginCredential';\r\nimport { NewNode } from './newNode';\r\nimport { NodeProperties } from './nodeProperties';\r\n\r\n\r\n/**\r\n * Representation of a node used by Cloudiator\r\n */\r\nexport interface Node { \r\n    /**\r\n     * Human-readable name for the node. \r\n     */\r\n    name?: string;\r\n    loginCredential?: LoginCredential;\r\n    /**\r\n     * The public/private ip addresses under which this node is reachable. \r\n     */\r\n    ipAddresses?: Array<IpAddress>;\r\n    /**\r\n     * Further properties of this node. \r\n     */\r\n    nodeProperties?: NodeProperties;\r\n    /**\r\n     * Reason this node was created \r\n     */\r\n    reason?: string;\r\n    /**\r\n     * Diagnostic information about the node state \r\n     */\r\n    diagnostic?: string;\r\n    /**\r\n     * The node candidate this node was created from if applicable. \r\n     */\r\n    nodeCandidate?: string;\r\n    /**\r\n     * Unique identifier of this node. \r\n     */\r\n    id?: string;\r\n    /**\r\n     * Original id of this node. Is present of the node was created e.g. at a cloud provider. \r\n     */\r\n    originId?: string;\r\n    /**\r\n     * User id of the owner of this node. \r\n     */\r\n    userId?: string;\r\n    /**\r\n     * The type of this node. \r\n     */\r\n    nodeType?: Node.NodeTypeEnum;\r\n    /**\r\n     * The state the node is currently in. \r\n     */\r\n    state?: Node.StateEnum;\r\n}\r\nexport namespace Node {\r\n    export type NodeTypeEnum = 'UNKNOWN_TYPE' | 'VM' | 'BYON' | 'CONTAINER' | 'FAAS';\r\n    export const NodeTypeEnum = {\r\n        UNKNOWNTYPE: 'UNKNOWN_TYPE' as NodeTypeEnum,\r\n        VM: 'VM' as NodeTypeEnum,\r\n        BYON: 'BYON' as NodeTypeEnum,\r\n        CONTAINER: 'CONTAINER' as NodeTypeEnum,\r\n        FAAS: 'FAAS' as NodeTypeEnum\r\n    };\r\n    export type StateEnum = 'PENDING' | 'RUNNING' | 'ERROR' | 'DELETED';\r\n    export const StateEnum = {\r\n        PENDING: 'PENDING' as StateEnum,\r\n        RUNNING: 'RUNNING' as StateEnum,\r\n        ERROR: 'ERROR' as StateEnum,\r\n        DELETED: 'DELETED' as StateEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Behaviour } from './behaviour';\r\nimport { Interval } from './interval';\r\n\r\n\r\n/**\r\n * Subtype of Behaviour Represents a periodic runtime behaviour \r\n */\r\nexport interface PeriodicBehaviour extends Behaviour { \r\n    interval?: Interval;\r\n    collisionHandling?: PeriodicBehaviour.CollisionHandlingEnum;\r\n}\r\nexport namespace PeriodicBehaviour {\r\n    export type CollisionHandlingEnum = 'CANCEL' | 'PARALLEL' | 'SKIP';\r\n    export const CollisionHandlingEnum = {\r\n        CANCEL: 'CANCEL' as CollisionHandlingEnum,\r\n        PARALLEL: 'PARALLEL' as CollisionHandlingEnum,\r\n        SKIP: 'SKIP' as CollisionHandlingEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { Api } from './api';\r\nimport { CloudCredential } from './cloudCredential';\r\nimport { NewPlatform } from './newPlatform';\r\n\r\n\r\n/**\r\n * Representation of a platform used by Cloudiator\r\n */\r\nexport interface Platform { \r\n    /**\r\n     * Human-readable name\r\n     */\r\n    name: string;\r\n    /**\r\n     * PaaS stack type\r\n     */\r\n    type?: Platform.TypeEnum;\r\n    api: Api;\r\n    credential: CloudCredential;\r\n    /**\r\n     * URI where the api of this platform provider can be accessed.\r\n     */\r\n    endpoint?: string;\r\n    /**\r\n     * Unique identifier for the platform\r\n     */\r\n    id?: string;\r\n}\r\nexport namespace Platform {\r\n    export type TypeEnum = 'HEROKU' | 'OPENSHIFT' | 'CLOUDFOUNDRY';\r\n    export const TypeEnum = {\r\n        HEROKU: 'HEROKU' as TypeEnum,\r\n        OPENSHIFT: 'OPENSHIFT' as TypeEnum,\r\n        CLOUDFOUNDRY: 'CLOUDFOUNDRY' as TypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { NewPlatformRuntime } from './newPlatformRuntime';\r\n\r\n\r\n/**\r\n * Repesents a PaaS environemnt to run an component \r\n */\r\nexport interface PlatformRuntime { \r\n    /**\r\n     * human readable name\r\n     */\r\n    name: string;\r\n    /**\r\n     * the specific runtime language\r\n     */\r\n    language: PlatformRuntime.LanguageEnum;\r\n    /**\r\n     * language version number\r\n     */\r\n    languageVersion?: number;\r\n    /**\r\n     * specifies the runtime type\r\n     */\r\n    runtimeType: PlatformRuntime.RuntimeTypeEnum;\r\n    /**\r\n     * the version of the specified type\r\n     */\r\n    version: number;\r\n    /**\r\n     * Unique identifier for the hardwareRuntime\r\n     */\r\n    id?: string;\r\n}\r\nexport namespace PlatformRuntime {\r\n    export type LanguageEnum = 'PHP' | 'JAVA' | 'RUBY' | 'PYTHON';\r\n    export const LanguageEnum = {\r\n        PHP: 'PHP' as LanguageEnum,\r\n        JAVA: 'JAVA' as LanguageEnum,\r\n        RUBY: 'RUBY' as LanguageEnum,\r\n        PYTHON: 'PYTHON' as LanguageEnum\r\n    };\r\n    export type RuntimeTypeEnum = 'standalone' | 'server';\r\n    export const RuntimeTypeEnum = {\r\n        Standalone: 'standalone' as RuntimeTypeEnum,\r\n        Server: 'server' as RuntimeTypeEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\nimport { CloudiatorProcess } from './cloudiatorProcess';\r\nimport { ScheduleNew } from './scheduleNew';\r\n\r\n\r\nexport interface Schedule { \r\n    /**\r\n     * The identifier of the job\r\n     */\r\n    job?: string;\r\n    /**\r\n     * If the instantiation should be handled AUTOMATIC or MANUAL\r\n     */\r\n    instantiation?: Schedule.InstantiationEnum;\r\n    id?: string;\r\n    owner?: string;\r\n    processes?: Array<CloudiatorProcess>;\r\n    state?: Schedule.StateEnum;\r\n}\r\nexport namespace Schedule {\r\n    export type InstantiationEnum = 'AUTOMATIC' | 'MANUAL';\r\n    export const InstantiationEnum = {\r\n        AUTOMATIC: 'AUTOMATIC' as InstantiationEnum,\r\n        MANUAL: 'MANUAL' as InstantiationEnum\r\n    };\r\n    export type StateEnum = 'PENDING' | 'RUNNING' | 'ERROR' | 'RESTORING' | 'DELETED' | 'MANUAL';\r\n    export const StateEnum = {\r\n        PENDING: 'PENDING' as StateEnum,\r\n        RUNNING: 'RUNNING' as StateEnum,\r\n        ERROR: 'ERROR' as StateEnum,\r\n        RESTORING: 'RESTORING' as StateEnum,\r\n        DELETED: 'DELETED' as StateEnum,\r\n        MANUAL: 'MANUAL' as StateEnum\r\n    };\r\n}\r\n","/**\r\n * Cloudiator REST Api\r\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n * OpenAPI spec version: 0.2.0\r\n * Contact: daniel.baur@uni-ulm.de\r\n *\r\n * NOTE: This class is auto generated by the swagger code generator program.\r\n * https://github.com/swagger-api/swagger-codegen.git\r\n * Do not edit the class manually.\r\n */\r\n/* tslint:disable:no-unused-variable member-ordering */\r\n\r\nimport { Inject, Injectable, Optional }                      from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams,\r\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\r\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\r\n\r\nimport { Observable }                                        from 'rxjs';\r\n\r\nimport { NewPlatform } from '../model/newPlatform';\r\nimport { NewPlatformEnvironment } from '../model/newPlatformEnvironment';\r\nimport { NewPlatformHardware } from '../model/newPlatformHardware';\r\nimport { NewPlatformRuntime } from '../model/newPlatformRuntime';\r\nimport { Platform } from '../model/platform';\r\nimport { PlatformEnvironment } from '../model/platformEnvironment';\r\nimport { PlatformHardware } from '../model/platformHardware';\r\nimport { PlatformRuntime } from '../model/platformRuntime';\r\n\r\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\r\nimport { Configuration }                                     from '../configuration';\r\n\r\n\r\n@Injectable()\r\nexport class PlatformService {\r\n\r\n    protected basePath = 'http://localhost:9000';\r\n    public defaultHeaders = new HttpHeaders();\r\n    public configuration = new Configuration();\r\n\r\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\r\n        if (basePath) {\r\n            this.basePath = basePath;\r\n        }\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = basePath || configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param consumes string[] mime-types\r\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\r\n     */\r\n    private canConsumeForm(consumes: string[]): boolean {\r\n        const form = 'multipart/form-data';\r\n        for (const consume of consumes) {\r\n            if (form === consume) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     * Creates a new platform.\r\n     * @param platform Platform to add\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addPlatform(platform: NewPlatform, observe?: 'body', reportProgress?: boolean): Observable<Platform>;\r\n    public addPlatform(platform: NewPlatform, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Platform>>;\r\n    public addPlatform(platform: NewPlatform, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Platform>>;\r\n    public addPlatform(platform: NewPlatform, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (platform === null || platform === undefined) {\r\n            throw new Error('Required parameter platform was null or undefined when calling addPlatform.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<Platform>(`${this.basePath}/platform`,\r\n            platform,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Creates a new PlatformEnvironment \r\n     * @param platformEnvironment PlatformEnvironment to be created \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'body', reportProgress?: boolean): Observable<PlatformEnvironment>;\r\n    public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformEnvironment>>;\r\n    public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformEnvironment>>;\r\n    public addPlatformEnvironment(platformEnvironment: NewPlatformEnvironment, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (platformEnvironment === null || platformEnvironment === undefined) {\r\n            throw new Error('Required parameter platformEnvironment was null or undefined when calling addPlatformEnvironment.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<PlatformEnvironment>(`${this.basePath}/platformEnvironment`,\r\n            platformEnvironment,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Creates a new PlatformHardware \r\n     * @param platformHardware PlatformHardware to be created \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'body', reportProgress?: boolean): Observable<PlatformHardware>;\r\n    public addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformHardware>>;\r\n    public addPlatformHardware(platformHardware: NewPlatformHardware, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformHardware>>;\r\n    public addPlatformHardware(platformHardware: NewPlatformHardware, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (platformHardware === null || platformHardware === undefined) {\r\n            throw new Error('Required parameter platformHardware was null or undefined when calling addPlatformHardware.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<PlatformHardware>(`${this.basePath}/platformHardware`,\r\n            platformHardware,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Creates a new PlatformRuntime \r\n     * @param platformRuntime PlatformRuntime to be created \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'body', reportProgress?: boolean): Observable<PlatformRuntime>;\r\n    public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformRuntime>>;\r\n    public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformRuntime>>;\r\n    public addPlatformRuntime(platformRuntime: NewPlatformRuntime, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (platformRuntime === null || platformRuntime === undefined) {\r\n            throw new Error('Required parameter platformRuntime was null or undefined when calling addPlatformRuntime.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\r\n        if (httpContentTypeSelected != undefined) {\r\n            headers = headers.set('Content-Type', httpContentTypeSelected);\r\n        }\r\n\r\n        return this.httpClient.post<PlatformRuntime>(`${this.basePath}/platformRuntime`,\r\n            platformRuntime,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Deletes the platform identified by the given id paramater. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public deletePlatform(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\r\n    public deletePlatform(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\r\n    public deletePlatform(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\r\n    public deletePlatform(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling deletePlatform.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n            'application/json'\r\n        ];\r\n\r\n        return this.httpClient.delete<any>(`${this.basePath}/platform/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the platform identified by the given id parameter \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatform(id: string, observe?: 'body', reportProgress?: boolean): Observable<Platform>;\r\n    public findPlatform(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Platform>>;\r\n    public findPlatform(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Platform>>;\r\n    public findPlatform(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findPlatform.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Platform>(`${this.basePath}/platform/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the PlatformEnvironment identified by the id parameter. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatformEnvironment(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformEnvironment>;\r\n    public findPlatformEnvironment(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformEnvironment>>;\r\n    public findPlatformEnvironment(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformEnvironment>>;\r\n    public findPlatformEnvironment(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findPlatformEnvironment.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<PlatformEnvironment>(`${this.basePath}/platformEnvironment/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all platform environment  visible to the user \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatformEnvironments(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformEnvironment>>;\r\n    public findPlatformEnvironments(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformEnvironment>>>;\r\n    public findPlatformEnvironments(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformEnvironment>>>;\r\n    public findPlatformEnvironments(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<PlatformEnvironment>>(`${this.basePath}/platformEnvironment`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the PlatformHardware identified by the id parameter. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatformHardware(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformHardware>;\r\n    public findPlatformHardware(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformHardware>>;\r\n    public findPlatformHardware(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformHardware>>;\r\n    public findPlatformHardware(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findPlatformHardware.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<PlatformHardware>(`${this.basePath}/platformHardware/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all platform hardware visible to the user \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatformHardwares(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformHardware>>;\r\n    public findPlatformHardwares(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformHardware>>>;\r\n    public findPlatformHardwares(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformHardware>>>;\r\n    public findPlatformHardwares(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<PlatformHardware>>(`${this.basePath}/platformHardware`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns the PlatformRuntime identified by the id parameter. \r\n     * @param id Unique identifier of the resource\r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatformRuntime(id: string, observe?: 'body', reportProgress?: boolean): Observable<PlatformRuntime>;\r\n    public findPlatformRuntime(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlatformRuntime>>;\r\n    public findPlatformRuntime(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlatformRuntime>>;\r\n    public findPlatformRuntime(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        if (id === null || id === undefined) {\r\n            throw new Error('Required parameter id was null or undefined when calling findPlatformRuntime.');\r\n        }\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<PlatformRuntime>(`${this.basePath}/platformRuntime/${encodeURIComponent(String(id))}`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all platform runtime  visible to the user \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatformRuntimes(observe?: 'body', reportProgress?: boolean): Observable<Array<PlatformRuntime>>;\r\n    public findPlatformRuntimes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PlatformRuntime>>>;\r\n    public findPlatformRuntimes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PlatformRuntime>>>;\r\n    public findPlatformRuntimes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<PlatformRuntime>>(`${this.basePath}/platformRuntime`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * \r\n     * Returns all platform from the system that the user has access to \r\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\r\n     * @param reportProgress flag to report request and response progress.\r\n     */\r\n    public findPlatforms(observe?: 'body', reportProgress?: boolean): Observable<Array<Platform>>;\r\n    public findPlatforms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Platform>>>;\r\n    public findPlatforms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Platform>>>;\r\n    public findPlatforms(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\r\n\r\n        let headers = this.defaultHeaders;\r\n\r\n        // authentication (ApiKeyAuth) required\r\n        if (this.configuration.apiKeys[\"X-API-Key\"]) {\r\n            headers = headers.set('X-API-Key', this.configuration.apiKeys[\"X-API-Key\"]);\r\n        }\r\n\r\n        // to determine the Accept header\r\n        let httpHeaderAccepts: string[] = [\r\n            'application/json'\r\n        ];\r\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\r\n        if (httpHeaderAcceptSelected != undefined) {\r\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\r\n        }\r\n\r\n        // to determine the Content-Type header\r\n        const consumes: string[] = [\r\n        ];\r\n\r\n        return this.httpClient.get<Array<Platform>>(`${this.basePath}/platform`,\r\n            {\r\n                withCredentials: this.configuration.withCredentials,\r\n                headers: headers,\r\n                observe: observe,\r\n                reportProgress: reportProgress\r\n            }\r\n        );\r\n    }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { Configuration } from './configuration';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\r\nimport { CloudService } from './api/cloud.service';\r\nimport { JobService } from './api/job.service';\r\nimport { MatchmakingService } from './api/matchmaking.service';\r\nimport { MiscService } from './api/misc.service';\r\nimport { MonitoringService } from './api/monitoring.service';\r\nimport { NodeService } from './api/node.service';\r\nimport { PlatformService } from './api/platform.service';\r\nimport { ProcessService } from './api/process.service';\r\nimport { QueueService } from './api/queue.service';\r\nimport { ScaleService } from './api/scale.service';\r\nimport { SecurityService } from './api/security.service';\r\nimport { UserService } from './api/user.service';\r\nimport { YamlService } from './api/yaml.service';\r\n\r\n@NgModule({\r\n  imports:      [],\r\n  declarations: [],\r\n  exports:      [],\r\n  providers: [\r\n    CloudService,\r\n    JobService,\r\n    MatchmakingService,\r\n    MiscService,\r\n    MonitoringService,\r\n    NodeService,\r\n    PlatformService,\r\n    ProcessService,\r\n    QueueService,\r\n    ScaleService,\r\n    SecurityService,\r\n    UserService,\r\n    YamlService ]\r\n})\r\nexport class ApiModule {\r\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\r\n        return {\r\n            ngModule: ApiModule,\r\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\r\n        };\r\n    }\r\n\r\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\r\n                 @Optional() http: HttpClient) {\r\n        if (parentModule) {\r\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\r\n        }\r\n        if (!http) {\r\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n            'See also https://github.com/angular/angular/issues/20575');\r\n        }\r\n    }\r\n}\r\n"],"names":["tslib_1.__param"],"mappings":"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"}
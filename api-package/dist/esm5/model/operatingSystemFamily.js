/**
 * Cloudiator REST Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 * Contact: daniel.baur@uni-ulm.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export var OperatingSystemFamily = {
    UBUNTU: 'UBUNTU',
    UNKOWNOSFAMILY: 'UNKOWN_OS_FAMILY',
    AIX: 'AIX',
    ARCH: 'ARCH',
    CENTOS: 'CENTOS',
    DARWIN: 'DARWIN',
    DEBIAN: 'DEBIAN',
    ESX: 'ESX',
    FEDORA: 'FEDORA',
    FREEBSD: 'FREEBSD',
    GENTOO: 'GENTOO',
    HPUX: 'HPUX',
    COREOS: 'COREOS',
    AMZNLINUX: 'AMZN_LINUX',
    MANDRIVA: 'MANDRIVA',
    NETBSD: 'NETBSD',
    OEL: 'OEL',
    OPENBSD: 'OPENBSD',
    RHEL: 'RHEL',
    SCIENTIFIC: 'SCIENTIFIC',
    CEL: 'CEL',
    SLACKWARE: 'SLACKWARE',
    SOLARIS: 'SOLARIS',
    SUSE: 'SUSE',
    TURBOLINUX: 'TURBOLINUX',
    CLOUDLINUX: 'CLOUD_LINUX',
    WINDOWS: 'WINDOWS'
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW5nU3lzdGVtRmFtaWx5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vY2xvdWRpYXRvci1yZXN0LWFwaS8iLCJzb3VyY2VzIjpbIm1vZGVsL29wZXJhdGluZ1N5c3RlbUZhbWlseS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztHQVVHO0FBUUgsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUc7SUFDakMsTUFBTSxFQUFFLFFBQWlDO0lBQ3pDLGNBQWMsRUFBRSxrQkFBMkM7SUFDM0QsR0FBRyxFQUFFLEtBQThCO0lBQ25DLElBQUksRUFBRSxNQUErQjtJQUNyQyxNQUFNLEVBQUUsUUFBaUM7SUFDekMsTUFBTSxFQUFFLFFBQWlDO0lBQ3pDLE1BQU0sRUFBRSxRQUFpQztJQUN6QyxHQUFHLEVBQUUsS0FBOEI7SUFDbkMsTUFBTSxFQUFFLFFBQWlDO0lBQ3pDLE9BQU8sRUFBRSxTQUFrQztJQUMzQyxNQUFNLEVBQUUsUUFBaUM7SUFDekMsSUFBSSxFQUFFLE1BQStCO0lBQ3JDLE1BQU0sRUFBRSxRQUFpQztJQUN6QyxTQUFTLEVBQUUsWUFBcUM7SUFDaEQsUUFBUSxFQUFFLFVBQW1DO0lBQzdDLE1BQU0sRUFBRSxRQUFpQztJQUN6QyxHQUFHLEVBQUUsS0FBOEI7SUFDbkMsT0FBTyxFQUFFLFNBQWtDO0lBQzNDLElBQUksRUFBRSxNQUErQjtJQUNyQyxVQUFVLEVBQUUsWUFBcUM7SUFDakQsR0FBRyxFQUFFLEtBQThCO0lBQ25DLFNBQVMsRUFBRSxXQUFvQztJQUMvQyxPQUFPLEVBQUUsU0FBa0M7SUFDM0MsSUFBSSxFQUFFLE1BQStCO0lBQ3JDLFVBQVUsRUFBRSxZQUFxQztJQUNqRCxVQUFVLEVBQUUsYUFBc0M7SUFDbEQsT0FBTyxFQUFFLFNBQWtDO0NBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ2xvdWRpYXRvciBSRVNUIEFwaVxyXG4gKiBObyBkZXNjcmlwdGlvbiBwcm92aWRlZCAoZ2VuZXJhdGVkIGJ5IFN3YWdnZXIgQ29kZWdlbiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuKVxyXG4gKlxyXG4gKiBPcGVuQVBJIHNwZWMgdmVyc2lvbjogMC4yLjBcclxuICogQ29udGFjdDogZGFuaWVsLmJhdXJAdW5pLXVsbS5kZVxyXG4gKlxyXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IHRoZSBzd2FnZ2VyIGNvZGUgZ2VuZXJhdG9yIHByb2dyYW0uXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zd2FnZ2VyLWFwaS9zd2FnZ2VyLWNvZGVnZW4uZ2l0XHJcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIFR5cGUgb2YgT1MgRmFtaWx5XHJcbiAqL1xyXG5leHBvcnQgdHlwZSBPcGVyYXRpbmdTeXN0ZW1GYW1pbHkgPSAnVUJVTlRVJyB8ICdVTktPV05fT1NfRkFNSUxZJyB8ICdBSVgnIHwgJ0FSQ0gnIHwgJ0NFTlRPUycgfCAnREFSV0lOJyB8ICdERUJJQU4nIHwgJ0VTWCcgfCAnRkVET1JBJyB8ICdGUkVFQlNEJyB8ICdHRU5UT08nIHwgJ0hQVVgnIHwgJ0NPUkVPUycgfCAnQU1aTl9MSU5VWCcgfCAnTUFORFJJVkEnIHwgJ05FVEJTRCcgfCAnT0VMJyB8ICdPUEVOQlNEJyB8ICdSSEVMJyB8ICdTQ0lFTlRJRklDJyB8ICdDRUwnIHwgJ1NMQUNLV0FSRScgfCAnU09MQVJJUycgfCAnU1VTRScgfCAnVFVSQk9MSU5VWCcgfCAnQ0xPVURfTElOVVgnIHwgJ1dJTkRPV1MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE9wZXJhdGluZ1N5c3RlbUZhbWlseSA9IHtcclxuICAgIFVCVU5UVTogJ1VCVU5UVScgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgVU5LT1dOT1NGQU1JTFk6ICdVTktPV05fT1NfRkFNSUxZJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBBSVg6ICdBSVgnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIEFSQ0g6ICdBUkNIJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBDRU5UT1M6ICdDRU5UT1MnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIERBUldJTjogJ0RBUldJTicgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgREVCSUFOOiAnREVCSUFOJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBFU1g6ICdFU1gnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIEZFRE9SQTogJ0ZFRE9SQScgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgRlJFRUJTRDogJ0ZSRUVCU0QnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIEdFTlRPTzogJ0dFTlRPTycgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgSFBVWDogJ0hQVVgnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIENPUkVPUzogJ0NPUkVPUycgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgQU1aTkxJTlVYOiAnQU1aTl9MSU5VWCcgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgTUFORFJJVkE6ICdNQU5EUklWQScgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgTkVUQlNEOiAnTkVUQlNEJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBPRUw6ICdPRUwnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIE9QRU5CU0Q6ICdPUEVOQlNEJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBSSEVMOiAnUkhFTCcgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgU0NJRU5USUZJQzogJ1NDSUVOVElGSUMnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIENFTDogJ0NFTCcgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgU0xBQ0tXQVJFOiAnU0xBQ0tXQVJFJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBTT0xBUklTOiAnU09MQVJJUycgYXMgT3BlcmF0aW5nU3lzdGVtRmFtaWx5LFxyXG4gICAgU1VTRTogJ1NVU0UnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIFRVUkJPTElOVVg6ICdUVVJCT0xJTlVYJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHksXHJcbiAgICBDTE9VRExJTlVYOiAnQ0xPVURfTElOVVgnIGFzIE9wZXJhdGluZ1N5c3RlbUZhbWlseSxcclxuICAgIFdJTkRPV1M6ICdXSU5ET1dTJyBhcyBPcGVyYXRpbmdTeXN0ZW1GYW1pbHlcclxufTtcclxuIl19
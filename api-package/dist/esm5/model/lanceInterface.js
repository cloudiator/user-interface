export var LanceInterface;
(function (LanceInterface) {
    LanceInterface.ContainerTypeEnum = {
        NATIVE: 'NATIVE',
        DOCKER: 'DOCKER',
        BOTH: 'BOTH'
    };
})(LanceInterface || (LanceInterface = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuY2VJbnRlcmZhY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jbG91ZGlhdG9yLXJlc3QtYXBpLyIsInNvdXJjZXMiOlsibW9kZWwvbGFuY2VJbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0ZBLE1BQU0sS0FBVyxjQUFjLENBTzlCO0FBUEQsV0FBaUIsY0FBYztJQUVkLGdDQUFpQixHQUFHO1FBQzdCLE1BQU0sRUFBRSxRQUE2QjtRQUNyQyxNQUFNLEVBQUUsUUFBNkI7UUFDckMsSUFBSSxFQUFFLE1BQTJCO0tBQ3BDLENBQUM7QUFDTixDQUFDLEVBUGdCLGNBQWMsS0FBZCxjQUFjLFFBTzlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENsb3VkaWF0b3IgUkVTVCBBcGlcclxuICogTm8gZGVzY3JpcHRpb24gcHJvdmlkZWQgKGdlbmVyYXRlZCBieSBTd2FnZ2VyIENvZGVnZW4gaHR0cHM6Ly9naXRodWIuY29tL3N3YWdnZXItYXBpL3N3YWdnZXItY29kZWdlbilcclxuICpcclxuICogT3BlbkFQSSBzcGVjIHZlcnNpb246IDAuMi4wXHJcbiAqIENvbnRhY3Q6IGRhbmllbC5iYXVyQHVuaS11bG0uZGVcclxuICpcclxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSB0aGUgc3dhZ2dlciBjb2RlIGdlbmVyYXRvciBwcm9ncmFtLlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3dhZ2dlci1hcGkvc3dhZ2dlci1jb2RlZ2VuLmdpdFxyXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXHJcbiAqL1xyXG5pbXBvcnQgeyBPcGVyYXRpbmdTeXN0ZW0gfSBmcm9tICcuL29wZXJhdGluZ1N5c3RlbSc7XHJcbmltcG9ydCB7IFRhc2tJbnRlcmZhY2UgfSBmcm9tICcuL3Rhc2tJbnRlcmZhY2UnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBQYXJ0IG9mIGEgdGFzay4gU3VidHlwZSBvZiBUYXNrSW50ZXJmYWNlLiBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGFuY2VJbnRlcmZhY2UgZXh0ZW5kcyBUYXNrSW50ZXJmYWNlIHsgXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjb250YWluZXIgdHlwZSB0aGF0IGxhbmNlIHNob3VsZCB1c2UuIENhbiBiZSBET0NLRVIgdG8gZm9yY2UgYSBkb2NrZXIgZGVwbG95bWVudCwgTkFUSVZFIHRvIGZvcmNlIGEgcGxhaW4gY29udGFpbmVyIGRlcGxveW1lbnQgb3IgQk9USCB0byBsZXQgdGhlIHN5c3RlbSBkZXJpdmUgdGhlIGNvbnRhaW5lciB0eXBlLiBcclxuICAgICAqL1xyXG4gICAgY29udGFpbmVyVHlwZT86IExhbmNlSW50ZXJmYWNlLkNvbnRhaW5lclR5cGVFbnVtO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXNjcmliZXMgdGhlIG9wZXJhdGluZyBzeXN0ZW0gcmVxdWlyZWQgYnkgdGhpcyBpbnRlcmZhY2UuIElmIGNvbnRhaW5lciB0eXBlIGlzIHNldCB0byBOQVRJVkUsIHRoaXMgZGVzY3JpYmVzIHRoZSBPUyByZXF1aXJlZCBieSB0aGUgc2NyaXB0cywgb2YgY29udGFpbmVyIHR5cGUgaXMgc2V0IHRvIERPQ0tFUiwgdGhpcyBkZXNjcmliZXMgdGhlIE9TIHVzZWQgdG8gc3Bhd24gdGhlIGRvY2tlciBjb250YWluZXIuIFxyXG4gICAgICovXHJcbiAgICBvcGVyYXRpbmdTeXN0ZW0/OiBPcGVyYXRpbmdTeXN0ZW07XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemF0aW9uIGFjdGlvbi4gXHJcbiAgICAgKi9cclxuICAgIGluaXQ/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGVkIGJlZm9yZSBpbnN0YWxsYXRpb24gYWN0aW9uLiBDYW4gYmUgZS5nLiB1c2VkIGZvciBkb3dubG9hZGluZyBiaW5hcmllcy4gXHJcbiAgICAgKi9cclxuICAgIHByZUluc3RhbGw/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgZm9yIGluc3RhbGxpbmcgdGhlIGFwcGxpY2F0aW9uLiBcclxuICAgICAqL1xyXG4gICAgaW5zdGFsbD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVXNlZCBmb3IgY29uZmlndXJhdGlvbiBvZiB0aGUgYXBwbGljYXRpb24gY29tcG9uZW50LiBGaXJzdCBhY3Rpb24gd2hlcmUgTGFuY2UgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQuIFxyXG4gICAgICovXHJcbiAgICBwb3N0SW5zdGFsbD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGJlZm9yZSBzdGFydGluZyB0aGUgYXBwbGljYXRpb24uIENhbiBiZSBlLmcuIHVzZWQgZm9yIGNvbmZpZ3VyYXRpb24gYW4gZW52aXJvbm1lbnQuIFxyXG4gICAgICovXHJcbiAgICBwcmVTdGFydD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIHRoZSBjb21wb25lbnQuIE5lZWRzIHRvIHJldHVybiBmb3IgUGxhaW5Db250YWluZXIgYW5kIG5vdCByZXR1cm4gZm9yIERvY2tlci4gXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0Pzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlY3RzIHRoZSBzdGFydCBvZiB0aGUgYXBwbGljYXRpb24uIFJlcXVpcmVkIGlmIHRoZSBhcHBsaWNhdGlvbiBkb2VzIG5vdCBzdGFydCBpbnN0YW50aWFub3VzLiBcclxuICAgICAqL1xyXG4gICAgc3RhcnREZXRlY3Rpb24/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyBpZiB0aGUgYXBwbGljYXRpb24gaGFzIHN0b3BwZWQuIElzIHBlcmlvZGljYWxseSBjaGVja2VkIHRvIGRldGVjdCBhIGNyYXNoIG9mIHRoZSBhcHBsaWNhdGlvbi4gXHJcbiAgICAgKi9cclxuICAgIHN0b3BEZXRlY3Rpb24/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBhcHBsaWNhdGlvbiBoYXMgc3VjY2Vzc2Z1bGx5IHN0YXJ0ZWQuIFxyXG4gICAgICovXHJcbiAgICBwb3N0U3RhcnQ/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBiZWZvcmUgdGhlIGFwcGxpY2F0aW9uIGlzIHN0b3BwZWQuIFxyXG4gICAgICovXHJcbiAgICBwcmVTdG9wPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9wcyB0aGUgYXBwbGljYXRpb24uIFxyXG4gICAgICovXHJcbiAgICBzdG9wPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlZCBhZnRlciB0aGUgYXBwbGljYXRpb24gaXMgc3VjY2Vzc2Z1bGx5IHN0b3BwZWQuIFxyXG4gICAgICovXHJcbiAgICBwb3N0U3RvcD86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogRXhlY3V0ZWQgYmVmb3JlIHRoZSBjb250YWluZXIgaXMgc2h1dGRvd24uIENhbiBiZSB1c2VkIHRvIGJhY2t1cCBzdGF0ZS4gXHJcbiAgICAgKi9cclxuICAgIHNodXRkb3duPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNjcmlwdCB0aGF0IGlzIGV4ZWN1dGVkIGlmIGEgbmV3IGluc3RhbmNlIG9mIGEgZG93bnN0cmVhbSB0YXNrIGlzIGF2YWlsYWJsZS4gXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZUFjdGlvbj86IHN0cmluZztcclxufVxyXG5leHBvcnQgbmFtZXNwYWNlIExhbmNlSW50ZXJmYWNlIHtcclxuICAgIGV4cG9ydCB0eXBlIENvbnRhaW5lclR5cGVFbnVtID0gJ05BVElWRScgfCAnRE9DS0VSJyB8ICdCT1RIJztcclxuICAgIGV4cG9ydCBjb25zdCBDb250YWluZXJUeXBlRW51bSA9IHtcclxuICAgICAgICBOQVRJVkU6ICdOQVRJVkUnIGFzIENvbnRhaW5lclR5cGVFbnVtLFxyXG4gICAgICAgIERPQ0tFUjogJ0RPQ0tFUicgYXMgQ29udGFpbmVyVHlwZUVudW0sXHJcbiAgICAgICAgQk9USDogJ0JPVEgnIGFzIENvbnRhaW5lclR5cGVFbnVtXHJcbiAgICB9O1xyXG59XHJcbiJdfQ==